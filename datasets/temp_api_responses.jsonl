{"qid": 1, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of parliament and scheduled addresses to identify who will speak\",\n        \"Locate the specific statement about President Yoweri Museveni's planned address to parliament\",\n        \"Note that the text states the address is 'slated for Tuesday afternoon', not Monday as the question asks\",\n        \"Return the person mentioned as addressing parliament, even though the day differs from the question\"\n    ],\n    \"pseudocode\": \"def find_parliament_speaker(text, target_day):\\n    sentences = split_into_sentences(text)\\n    speaker = None\\n    for sentence in sentences:\\n        if contains_parliament_address(sentence):\\n            speaker = extract_speaker_name(sentence)\\n            scheduled_day = extract_day(sentence)\\n            if scheduled_day != target_day:\\n                speaker = speaker\\n    return speaker\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 2, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for the person who is in intensive care according to the news article.\",\n        \"Locate the first paragraph which states 'A Singapore lawmaker was in intensive care Monday' and identify this lawmaker.\",\n        \"Find the specific name mentioned in the second paragraph: 'Seng Han Thong of the ruling People's Action Party underwent skin graft surgery at Singapore General Hospital Monday morning and was in stable condition'.\",\n        \"Extract 'Seng Han Thong' as the person who is in intensive care.\"\n    ],\n    \"pseudocode\": \"def find_person_in_intensive_care(article_text):\\n    sentences = split_into_sentences(article_text)\\n    for sentence in sentences:\\n        if contains_phrase(sentence, \\\"intensive care\\\"):\\n            person_name = extract_person_name(sentence)\\n            if person_name:\\n                return person_name\\n    return None\\n\\ndef extract_person_name(sentence):\\n    if contains_name_pattern(sentence):\\n        name = get_full_name(sentence)\\n        return name\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 3, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that mass is an intrinsic property of matter measured in kilograms, while weight is the force exerted on an object due to gravity, calculated as W = m \u00d7 g.\",\n        \"Recognize that mass remains constant regardless of location, but weight varies with gravitational field strength (g), which differs on Earth, Moon, or in space.\",\n        \"Evaluate each choice by applying the fundamental relationship between mass and weight to determine which correctly describes how gravity affects weight but not mass.\"\n    ],\n    \"pseudocode\": \"def evaluate_mass_weight_relationship(choices):\\n    mass_is_intrinsic = True\\n    weight_formula = \\\"W = m * g\\\"\\n    correct_choice = None\\n    \\n    for choice in choices:\\n        if choice == \\\"A\\\":\\n            is_correct = False\\n        elif choice == \\\"B\\\":\\n            is_correct = True\\n            correct_choice = choice\\n        elif choice == \\\"C\\\":\\n            is_correct = False\\n        elif choice == \\\"D\\\":\\n            is_correct = False\\n    \\n    return correct_choice\",\n    \"loop_count\": 1,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 4, "response": "{\n    \"reasoning_steps\": [\n        \"Set up variables for initial populations: let a be Species A ants and b be Species B ants on Day 0, with constraint a + b = 30.\",\n        \"Apply exponential growth rules: Species A doubles daily (multiplier 2^n) and Species B triples daily (multiplier 3^n) after n days.\",\n        \"Form equation for Day 5: 2^5 * a + 3^5 * b = 32a + 243b = 3281.\",\n        \"Solve the system of linear equations by elimination: multiply first equation by 32 to get 32a + 32b = 960.\",\n        \"Subtract to eliminate a: (32a + 243b) - (32a + 32b) = 211b = 3281 - 960 = 2321.\",\n        \"Calculate b = 2321/211 = 11, then find a = 30 - 11 = 19.\",\n        \"Compute Species A population on Day 5: 32 * 19 = 608.\"\n    ],\n    \"pseudocode\": \"def solve_ant_population():\\n    total_day0 = 30\\n    total_day5 = 3281\\n    growth_a = 2\\n    growth_b = 3\\n    days = 5\\n    \\n    multiplier_a = growth_a ** days\\n    multiplier_b = growth_b ** days\\n    \\n    coeff_b = multiplier_b - multiplier_a\\n    rhs = total_day5 - multiplier_a * total_day0\\n    \\n    b = rhs / coeff_b\\n    a = total_day0 - b\\n    \\n    species_a_day5 = multiplier_a * a\\n    return species_a_day5\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 11\n}"}
{"qid": 5, "response": "{\n    \"reasoning_steps\": [\n        \"Apply Burnside's lemma which states that the number of distinct colorings equals the average number of colorings fixed by each rotation in the symmetry group\",\n        \"Identify that the cube has 24 rotational symmetries: 1 identity, 6 face rotations (90\u00b0 and 270\u00b0 around 3 axes), 3 face rotations (180\u00b0 around 3 axes), 8 vertex rotations (120\u00b0 and 240\u00b0 around 4 body diagonals), and 6 edge rotations (180\u00b0 around 6 edge-midpoint axes)\",\n        \"For each type of rotation, count how many of the 2^8 = 256 possible colorings remain unchanged under that rotation\",\n        \"Calculate the sum of fixed colorings across all 24 rotations and divide by 24 to get the final count\"\n    ],\n    \"pseudocode\": \"def count_cube_colorings():\\n    total_fixed = 0\\n    \\n    identity_fixed = 256\\n    total_fixed = total_fixed + identity_fixed\\n    \\n    face_90_fixed = 16\\n    face_90_count = 6\\n    total_fixed = total_fixed + face_90_fixed * face_90_count\\n    \\n    face_180_fixed = 16\\n    face_180_count = 3\\n    total_fixed = total_fixed + face_180_fixed * face_180_count\\n    \\n    vertex_120_fixed = 4\\n    vertex_120_count = 8\\n    total_fixed = total_fixed + vertex_120_fixed * vertex_120_count\\n    \\n    edge_180_fixed = 8\\n    edge_180_count = 6\\n    total_fixed = total_fixed + edge_180_fixed * edge_180_count\\n    \\n    distinct_colorings = total_fixed / 24\\n    return distinct_colorings\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 11\n}"}
{"qid": 6, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that in U.S. law, spouses are treated as separate legal entities for criminal liability purposes\",\n        \"Understand that spousal privilege only protects certain communications between spouses, not criminal acts themselves\",\n        \"Determine that if both spouses participate in or commit a crime, both can be held criminally responsible\",\n        \"Return affirmative result since U.S. law allows prosecution of both spouses for the same criminal act\"\n    ],\n    \"pseudocode\": \"def can_spouses_be_arrested_for_same_crime():\\n    spousal_privilege_applies_to_communications = True\\n    spousal_privilege_prevents_arrest = False\\n    spouses_are_separate_legal_entities = True\\n    \\n    if spouses_are_separate_legal_entities and not spousal_privilege_prevents_arrest:\\n        both_can_be_arrested = True\\n    else:\\n        both_can_be_arrested = False\\n    \\n    return both_can_be_arrested\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 7, "response": "{\n    \"reasoning_steps\": [\n        \"Given 2011 positive numbers with sum 2012 and sum of reciprocals 2012, let x be one number and y_1, ..., y_2010 be the others, so y_1 + ... + y_2010 = 2012 - x and 1/y_1 + ... + 1/y_2010 = 2012 - 1/x.\",\n        \"Apply the Cauchy-Schwarz inequality: (\u2211y_i)(\u22111/y_i) \u2265 n\u00b2, where n is the number of terms, giving us (2012 - x)(2012 - 1/x) \u2265 2010\u00b2.\",\n        \"Expand the inequality to get 2012\u00b2 - 2012(x + 1/x) + 1 \u2265 2010\u00b2, then simplify to find x + 1/x \u2264 (2012\u00b2 - 2010\u00b2 + 1)/2012.\",\n        \"Calculate 2012\u00b2 - 2010\u00b2 = (2012 + 2010)(2012 - 2010) = 4022 \u00d7 2 = 8044, so x + 1/x \u2264 8045/2012.\",\n        \"Verify that equality can be achieved when all y_i are equal to (2012 - x)/2010, which satisfies both sum constraints when x + 1/x = 8045/2012.\"\n    ],\n    \"pseudocode\": \"def find_maximum_sum():\\n    sum_total = 2012\\n    reciprocal_sum_total = 2012\\n    n_other_numbers = 2010\\n    \\n    numerator = sum_total * sum_total - n_other_numbers * n_other_numbers + 1\\n    denominator = sum_total\\n    \\n    max_value = numerator / denominator\\n    \\n    return max_value\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 8, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that non-renewable resources are those that cannot be replenished on a human timescale once depleted\",\n        \"Recognize that oil is a fossil fuel formed from ancient organic matter over millions of years\",\n        \"Verify that solar, water, and wind are renewable resources that naturally replenish through Earth's cycles\",\n        \"Conclude that oil is the only non-renewable resource among the given options\"\n    ],\n    \"pseudocode\": \"def identify_non_renewable_resource(resources):\\n    non_renewable_types = ['oil', 'coal', 'natural_gas', 'uranium']\\n    for resource in resources:\\n        if resource in non_renewable_types:\\n            return resource\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 9, "response": "{\n    \"reasoning_steps\": [\n        \"Fourier Descriptors represent shape contours where the first coefficient (DC component) represents the centroid position, the second coefficient represents the fundamental frequency (size/scale), and higher coefficients represent increasingly fine shape details.\",\n        \"For a perfect circle, all Fourier coefficients except the DC component and fundamental frequency should be zero, as circles have no angular variations or higher-order shape complexities.\",\n        \"Compare the given object's descriptors (35,129,0,1,0,0,-1,0) with the circle's descriptors (0,40,0,0,0,0,0,0), noting that high-frequency noise manifests as small non-zero values in the higher-order coefficients.\",\n        \"Check if the higher-order coefficients (positions 3-8) are sufficiently small relative to the fundamental frequency coefficient to be considered noise rather than significant shape deviations.\"\n    ],\n    \"pseudocode\": \"def is_circle_like(object_descriptors, circle_descriptors):\\n    obj_fundamental = object_descriptors[1]\\n    noise_threshold = 0.05 * obj_fundamental\\n    \\n    for i in range(2, len(object_descriptors)):\\n        if abs(object_descriptors[i]) > noise_threshold:\\n            return False\\n    \\n    return True\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 10, "response": "{\n    \"reasoning_steps\": [\n        \"The Fundamental Theorem of Linear Programming states that if an optimal solution exists for a linear programming problem, then at least one optimal solution occurs at a vertex (corner point) of the feasible region.\",\n        \"To demonstrate this theorem algorithmically, we need to check all vertices of the feasible region defined by the linear constraints.\",\n        \"For each vertex, evaluate the objective function and track which vertex gives the optimal (maximum or minimum) value.\",\n        \"The Simplex Method leverages this theorem by systematically moving from vertex to vertex along edges of the feasible region until reaching the optimal solution.\"\n    ],\n    \"pseudocode\": \"def find_optimal_solution(constraints, objective_function, optimization_type):\\n    vertices = find_feasible_vertices(constraints)\\n    optimal_value = None\\n    optimal_vertex = None\\n    \\n    for vertex in vertices:\\n        value = evaluate_objective(objective_function, vertex)\\n        \\n        if optimal_value is None:\\n            optimal_value = value\\n            optimal_vertex = vertex\\n        elif optimization_type == 'maximize' and value > optimal_value:\\n            optimal_value = value\\n            optimal_vertex = vertex\\n        elif optimization_type == 'minimize' and value < optimal_value:\\n            optimal_value = value\\n            optimal_vertex = vertex\\n    \\n    return optimal_vertex, optimal_value\",\n    \"loop_count\": 1,\n    \"branch_count\": 4,\n    \"variable_count\": 6\n}"}
{"qid": 11, "response": "{\n    \"reasoning_steps\": [\n        \"Identify key terminology that indicates the sport: 'Formula One drivers' championship' appears in the first sentence, which directly names the sport.\",\n        \"Confirm with additional sport-specific terms: 'Grand Prix' (specifically 'German Grand Prix'), 'McLaren', 'Red Bull', 'Ferrari' are all Formula One racing teams.\",\n        \"Verify through competition structure: The text describes a drivers' championship and constructors' championship with point systems, which is the standard format for Formula One racing seasons.\"\n    ],\n    \"pseudocode\": \"def identify_sport(text):\\n    formula_one_indicators = ['Formula One', 'F1', 'drivers championship', 'Grand Prix']\\n    racing_teams = ['McLaren', 'Red Bull', 'Ferrari', 'Mercedes GP', 'Renault']\\n    \\n    for indicator in formula_one_indicators:\\n        if indicator in text:\\n            return 'Formula One'\\n    \\n    team_count = 0\\n    for team in racing_teams:\\n        if team in text:\\n            team_count = team_count + 1\\n    \\n    if team_count >= 3:\\n        return 'Formula One'\\n    \\n    return 'Unknown sport'\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 6\n}"}
{"qid": 12, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for a specific number of hours mentioned in the text.\",\n        \"Locate the sentence containing information about Walt Staton's sentencing, which states 'A judge sentenced him Tuesday to 300 hours of picking up trash on public property and a year of probation'.\",\n        \"Extract the numeric value '300' that directly precedes the word 'hours' in the context of community service.\",\n        \"Return this value as the answer to 'how many hours?'\"\n    ],\n    \"pseudocode\": \"def find_hours(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_hours_info(sentence):\\n            hours = extract_numeric_before_hours(sentence)\\n            return hours\\n    return None\\n\\ndef contains_hours_info(sentence):\\n    return 'hours' in sentence and has_numeric_value(sentence)\\n\\ndef extract_numeric_before_hours(sentence):\\n    words = split_into_words(sentence)\\n    for i in range(len(words) - 1):\\n        if words[i + 1] == 'hours' and is_numeric(words[i]):\\n            return words[i]\\n    return None\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 6\n}"}
{"qid": 13, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that for any Markov chain, the data processing inequality states that processing cannot increase information about a variable\",\n        \"Apply the Markov property: X_0 \u2192 X_1 \u2192 ... \u2192 X_n forms a Markov chain, meaning X_0 and X_n are conditionally independent given any intermediate X_k\",\n        \"Use the fact that conditioning reduces entropy: H(X_0|X_k) \u2264 H(X_0|X_n) when k < n, because knowing X_k provides at least as much information about X_0 as knowing X_n\",\n        \"Conclude that H(X_0|X_n) is non-decreasing as n increases, since each additional step in the Markov chain can only maintain or lose information about X_0\"\n    ],\n    \"pseudocode\": \"def is_conditional_entropy_non_decreasing():\\n    markov_chain_property = True\\n    data_processing_inequality = True\\n    \\n    if markov_chain_property and data_processing_inequality:\\n        for n in range(1, infinity):\\n            previous_entropy = compute_H_X0_given_Xn_minus_1()\\n            current_entropy = compute_H_X0_given_Xn()\\n            if current_entropy < previous_entropy:\\n                return False\\n    return True\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 14, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that Earth completes one full rotation on its axis in 24 hours, which defines one day\",\n        \"Calculate the time for seven rotations by multiplying 7 rotations \u00d7 24 hours per rotation\",\n        \"Convert the result to determine that 7 days equals one week\"\n    ],\n    \"pseudocode\": \"def calculate_rotation_time():\\n    hours_per_rotation = 24\\n    number_of_rotations = 7\\n    total_hours = hours_per_rotation * number_of_rotations\\n    days = total_hours / 24\\n    if days == 7:\\n        return \\\"one week\\\"\\n    elif days == 1:\\n        return \\\"one day\\\"\\n    elif days == 30:\\n        return \\\"one month\\\"\\n    elif days == 365:\\n        return \\\"one year\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 4,\n    \"variable_count\": 4\n}"}
{"qid": 15, "response": "{\n    \"reasoning_steps\": [\n        \"Square both sides of the inequality $\\\\sqrt{n} \\\\le \\\\sqrt{4n - 6}$ to get $n \\\\le 4n - 6$, which simplifies to $3n \\\\ge 6$, giving $n \\\\ge 2$.\",\n        \"Square both sides of the inequality $\\\\sqrt{4n - 6} < \\\\sqrt{2n + 5}$ to get $4n - 6 < 2n + 5$, which simplifies to $2n < 11$, giving $n < 5.5$.\",\n        \"Since n must be an integer and $2 \\\\le n < 5.5$, the possible values are n = 2, 3, 4, 5.\",\n        \"Verify each candidate value satisfies the original inequality by checking that both square root expressions are defined (non-negative arguments) and the inequality chain holds.\"\n    ],\n    \"pseudocode\": \"def count_valid_integers():\\n    count = 0\\n    n = 2\\n    while n < 5.5:\\n        if 4*n - 6 >= 0 and 2*n + 5 >= 0:\\n            if n <= 4*n - 6 and 4*n - 6 < 2*n + 5:\\n                count = count + 1\\n        n = n + 1\\n    return count\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 2\n}"}
{"qid": 16, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that popularity of sports is typically measured by viewership, participation rates, and cultural presence\",\n        \"Note that while sumo wrestling is Japan's national sport with deep cultural roots, baseball (yakyu) has the highest viewership and participation rates\",\n        \"Identify baseball's dominance through metrics like Nippon Professional Baseball league attendance, high school tournament viewership (Koshien), and youth participation\",\n        \"Compare baseball's metrics against other sports like soccer (J-League), sumo, and tennis to confirm baseball's top position\"\n    ],\n    \"pseudocode\": \"def find_most_popular_sport_japan():\\n    sports_data = {\\n        \\\"baseball\\\": {\\\"viewership\\\": 45000000, \\\"participation\\\": 7300000},\\n        \\\"soccer\\\": {\\\"viewership\\\": 25000000, \\\"participation\\\": 4800000},\\n        \\\"sumo\\\": {\\\"viewership\\\": 15000000, \\\"participation\\\": 100000},\\n        \\\"tennis\\\": {\\\"viewership\\\": 8000000, \\\"participation\\\": 3700000}\\n    }\\n    \\n    max_popularity = 0\\n    most_popular = \\\"\\\"\\n    \\n    for sport in sports_data:\\n        popularity_score = sports_data[sport][\\\"viewership\\\"] + sports_data[sport][\\\"participation\\\"]\\n        if popularity_score > max_popularity:\\n            max_popularity = popularity_score\\n            most_popular = sport\\n    \\n    return most_popular\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 5\n}"}
{"qid": 17, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that y = x\u00b2 + 12x + 5 is a quadratic function that opens upward, so it has a minimum value at its vertex.\",\n        \"Apply the completing the square technique: for ax\u00b2 + bx + c, add and subtract (b/2)\u00b2 to create a perfect square trinomial.\",\n        \"Calculate (12/2)\u00b2 = 36 and rewrite the equation as y = (x\u00b2 + 12x + 36) + 5 - 36 = (x + 6)\u00b2 - 31.\",\n        \"Since (x + 6)\u00b2 \u2265 0 for all real x, and equals 0 when x = -6, the minimum value of y occurs at x = -6.\",\n        \"Substitute x = -6 to find the minimum: y_min = (\u22126 + 6)\u00b2 - 31 = 0 - 31 = -31.\"\n    ],\n    \"pseudocode\": \"def find_minimum_quadratic():\\n    a = 1\\n    b = 12\\n    c = 5\\n    h = -b / (2 * a)\\n    k = a * h * h + b * h + c\\n    return k\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 18, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the location mentioned in the text where the coin introduction ceremony took place\",\n        \"Note that the text states 'The District of Columbia coin honoring Duke Ellington was introduced Tuesday in Washington'\",\n        \"Confirm this location by finding the specific venue: 'U.S. Mint Director Ed Moy introduced the new coin at a news conference Tuesday at the Smithsonian Institution's National Museum of American History'\",\n        \"Extract the city name 'Washington' as the answer to where the coin was introduced\"\n    ],\n    \"pseudocode\": \"def find_coin_introduction_location(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_keywords(sentence, ['coin', 'introduced', 'Tuesday']):\\n            location = extract_location(sentence)\\n            return location\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 19, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about Thomas Howes' employer\",\n        \"Locate the statement that 'All three are U.S. government contractors' which directly identifies their employment status\",\n        \"Confirm that Thomas Howes is one of the three Americans mentioned (along with Marc Gonsalves and Keith Stansell)\",\n        \"Extract that as a U.S. government contractor, Thomas Howes works for the U.S. government\"\n    ],\n    \"pseudocode\": \"def find_thomas_howes_employer(text):\\n    hostages = ['Marc Gonsalves', 'Thomas Howes', 'Keith Stansell']\\n    employer_info = extract_employment_info(text)\\n    \\n    for person in hostages:\\n        if person == 'Thomas Howes':\\n            if 'U.S. government contractors' in employer_info:\\n                return 'U.S. government'\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 20, "response": "{\n    \"reasoning_steps\": [\n        \"Identify activities that are legal in Germany based on German law, specifically noting that prostitution is regulated under the Prostitution Act (Prostituiertenschutzgesetz) since 2002\",\n        \"Include passive euthanasia which has been legal in Germany since 2009 following a Federal Court of Justice ruling\",\n        \"Add alcohol consumption which is legal for beer and wine from age 16 and spirits from age 18 under the Youth Protection Act\",\n        \"Exclude activities that are illegal or only partially decriminalized, such as recreational cannabis use which remains illegal despite recent reform discussions\"\n    ],\n    \"pseudocode\": \"def get_legal_activities_germany():\\n    legal_activities = []\\n    \\n    legal_activities.append(\\\"Prostitution (with regulations)\\\")\\n    legal_activities.append(\\\"Passive euthanasia\\\")\\n    legal_activities.append(\\\"Alcohol consumption\\\")\\n    \\n    return legal_activities\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 1\n}"}
{"qid": 21, "response": "{\n    \"reasoning_steps\": [\n        \"Retrieve a list of the world's wealthiest individuals from a reliable financial database or ranking system\",\n        \"For each person in the wealth ranking, check their educational background to determine if they completed high school\",\n        \"Among those who did not finish high school, identify the one with the highest net worth\",\n        \"Return the name of the wealthiest individual who did not complete high school education\"\n    ],\n    \"pseudocode\": \"def find_richest_without_high_school():\\n    wealthy_people = get_wealth_rankings()\\n    richest_without_hs = None\\n    max_wealth = 0\\n    \\n    for person in wealthy_people:\\n        education = get_education_info(person)\\n        if not completed_high_school(education):\\n            if person.net_worth > max_wealth:\\n                max_wealth = person.net_worth\\n                richest_without_hs = person\\n    \\n    return richest_without_hs\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 22, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks specifically about World Food Program (WFP) drivers killed, not all aid workers\",\n        \"Locate the statement about WFP driver Ahmed Saalim being killed\",\n        \"Extract the key fact that Ahmed Saalim was 'the fourth WFP driver killed in Somalia this year'\",\n        \"Conclude that if Ahmed Saalim is the fourth, then the total number of WFP drivers killed is 4\"\n    ],\n    \"pseudocode\": \"def count_wfp_drivers_killed(text):\\n    wfp_section = find_wfp_mention(text)\\n    if contains_ordinal_count(wfp_section):\\n        ordinal = extract_ordinal(wfp_section)\\n        total = convert_ordinal_to_number(ordinal)\\n        return total\\n    else:\\n        return 0\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 23, "response": "{\n    \"reasoning_steps\": [\n        \"Recall Liouville's theorem: a bounded entire function must be constant\",\n        \"Check f(x)=0: this is a constant function, hence entire and bounded with |f(x)|=0 for all x\",\n        \"Check f(x)=1+i: this is a constant function, hence entire and bounded with |f(x)|=\u221a2 for all x\",\n        \"Check f(x)=sin(x): this is entire but unbounded since |sin(x)| can grow arbitrarily large for complex x\",\n        \"Check f(x)=min{|cos(x)|,1}: this function is not entire because the min operation creates non-differentiability points\"\n    ],\n    \"pseudocode\": \"def find_bounded_entire_functions():\\n    bounded_entire = []\\n    \\n    f1_is_constant = True\\n    f1_is_bounded = True\\n    if f1_is_constant and f1_is_bounded:\\n        bounded_entire.append(1)\\n    \\n    f2_is_constant = True\\n    f2_is_bounded = True\\n    if f2_is_constant and f2_is_bounded:\\n        bounded_entire.append(2)\\n    \\n    f3_is_entire = True\\n    f3_is_bounded = False\\n    if f3_is_entire and f3_is_bounded:\\n        bounded_entire.append(3)\\n    \\n    f4_is_entire = False\\n    f4_is_bounded = True\\n    if f4_is_entire and f4_is_bounded:\\n        bounded_entire.append(4)\\n    \\n    return bounded_entire\",\n    \"loop_count\": 0,\n    \"branch_count\": 4,\n    \"variable_count\": 10\n}"}
{"qid": 24, "response": "{\n    \"reasoning_steps\": [\n        \"Express all six trigonometric functions in terms of sin x and cos x, using identities tan x = sin x/cos x, cot x = cos x/sin x, sec x = 1/cos x, and csc x = 1/sin x.\",\n        \"Combine terms with common denominators and use the Pythagorean identity sin\u00b2x + cos\u00b2x = 1 to simplify the expression.\",\n        \"Factor out (sin x + cos x) from the left side and substitute sin x cos x = (1/2)sin 2x to transform the equation.\",\n        \"Square both sides to eliminate the square root implicit in (sin x + cos x), noting that (sin x + cos x)\u00b2 = 1 + 2sin x cos x = 1 + sin 2x.\",\n        \"Expand the squared equation and simplify to obtain a cubic equation in sin 2x.\",\n        \"Factor the cubic as sin 2x(sin\u00b22x - 44sin 2x + 36) = 0 and reject sin 2x = 0 since it makes the original expression undefined.\",\n        \"Apply the quadratic formula to sin\u00b22x - 44sin 2x + 36 = 0 to find sin 2x = 22 \u00b1 8\u221a7.\",\n        \"Reject sin 2x = 22 + 8\u221a7 since sine values must be in [-1, 1], leaving sin 2x = 22 - 8\u221a7.\"\n    ],\n    \"pseudocode\": \"def find_sin_2x():\\n    # Given: sin x + cos x + tan x + cot x + sec x + csc x = 7\\n    # Express in terms of sin x and cos x\\n    # sin x + cos x + sin x/cos x + cos x/sin x + 1/cos x + 1/sin x = 7\\n    \\n    # Let s = sin x + cos x and p = sin x * cos x\\n    # Note that p = (1/2) * sin 2x\\n    \\n    # After algebraic manipulation, we get:\\n    # (s)(sin 2x + 2) = 7 * sin 2x - 2\\n    \\n    # Square both sides\\n    # s^2 = 1 + 2p = 1 + sin 2x\\n    # (1 + sin 2x)(sin 2x + 2)^2 = (7 * sin 2x - 2)^2\\n    \\n    # Let u = sin 2x\\n    # Expand and simplify to get cubic equation\\n    # u^3 - 44u^2 + 36u = 0\\n    \\n    # Factor out u\\n    # u(u^2 - 44u + 36) = 0\\n    \\n    if u == 0:\\n        return \\\"undefined\\\"  # Original expression undefined\\n    \\n    # Solve quadratic u^2 - 44u + 36 = 0\\n    discriminant = 44^2 - 4*1*36\\n    discriminant = 1936 - 144\\n    discriminant = 1792\\n    sqrt_discriminant = 8 * sqrt(7)  # Since 1792 = 64 * 28 = 64 * 7 * 4\\n    \\n    u1 = (44 + sqrt_discriminant) / 2\\n    u2 = (44 - sqrt_discriminant) / 2\\n    \\n    u1 = 22 + 8 * sqrt(7)\\n    u2 = 22 - 8 * sqrt(7)\\n    \\n    # Check validity: sine must be in [-1, 1]\\n    if u1 > 1:\\n        return u2\\n    else:\\n        return u1\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 7\n}"}
{"qid": 25, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the key cellular structures observed: nucleus, cell wall, and chloroplasts\",\n        \"Recall that organisms with a nucleus are eukaryotes, which excludes kingdom Monera (prokaryotes)\",\n        \"Recognize that chloroplasts are organelles that perform photosynthesis, found only in plants and some protists\",\n        \"Note that while fungi have cell walls, they lack chloroplasts and cannot photosynthesize\",\n        \"Conclude that the presence of all three structures (nucleus, cell wall, and chloroplasts) is characteristic of kingdom Plantae\"\n    ],\n    \"pseudocode\": \"def classify_organism(cellular_structures):\\n    has_nucleus = False\\n    has_cell_wall = False\\n    has_chloroplasts = False\\n    \\n    for structure in cellular_structures:\\n        if structure == \\\"nucleus\\\":\\n            has_nucleus = True\\n        elif structure == \\\"cell_wall\\\":\\n            has_cell_wall = True\\n        elif structure == \\\"chloroplasts\\\":\\n            has_chloroplasts = True\\n    \\n    if not has_nucleus:\\n        return \\\"Monera\\\"\\n    elif has_chloroplasts:\\n        return \\\"Plantae\\\"\\n    elif has_cell_wall and not has_chloroplasts:\\n        return \\\"Fungi\\\"\\n    elif has_nucleus and not has_cell_wall:\\n        return \\\"Animalia\\\"\\n    else:\\n        return \\\"Unknown\\\"\",\n    \"loop_count\": 1,\n    \"branch_count\": 10,\n    \"variable_count\": 5\n}"}
{"qid": 26, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the key passage that explicitly states what the strike focuses on, which appears in the third paragraph describing the pilots walking off the job\",\n        \"Extract the specific phrase that describes the central issues: 'protracted contract negotiations centering around pay and job security'\",\n        \"Verify this is consistent with other details in the text, such as the union seeking a 6.4 percent pay increase and concerns about job security due to airline acquisitions\"\n    ],\n    \"pseudocode\": \"def find_strike_focus(text):\\n    paragraphs = split_text_into_paragraphs(text)\\n    for paragraph in paragraphs:\\n        if contains_strike_reason(paragraph):\\n            focus = extract_strike_focus(paragraph)\\n            return focus\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 27, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize this as a Stirling number of the second kind problem S(7,5) multiplied by (5-1)! since tables are identical and circular\",\n        \"Calculate S(7,5) using the recurrence relation S(n,k) = k*S(n-1,k) + S(n-1,k-1)\",\n        \"Build up from base cases S(n,1) = 1 and S(n,n) = 1 to compute S(7,5) = 140\",\n        \"Since circular arrangements at each table divide by the number of rotations, multiply S(7,5) by (5-1)!/5 = 24/5\",\n        \"However, for identical round tables with distinct people, we use the formula: S(7,5) * 6!/5! = 140 * 6/5 = 168\",\n        \"Apply the correct formula for seating at identical round tables: sum over partitions of 7 into 5 parts, dividing by symmetries\"\n    ],\n    \"pseudocode\": \"def count_seating_arrangements():\\n    n = 7\\n    k = 5\\n    stirling = [[0 for j in range(k+1)] for i in range(n+1)]\\n    \\n    for i in range(n+1):\\n        stirling[i][0] = 0\\n        if i <= k:\\n            stirling[i][i] = 1\\n    \\n    stirling[0][0] = 1\\n    \\n    for i in range(1, n+1):\\n        for j in range(1, min(i, k)+1):\\n            stirling[i][j] = j * stirling[i-1][j] + stirling[i-1][j-1]\\n    \\n    s_7_5 = stirling[7][5]\\n    \\n    factorial_ratio = 1\\n    for i in range(1, k):\\n        factorial_ratio = factorial_ratio * i\\n    \\n    result = s_7_5 * factorial_ratio / k\\n    \\n    return result\",\n    \"loop_count\": 3,\n    \"branch_count\": 2,\n    \"variable_count\": 9\n}"}
{"qid": 28, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that we need to sum even positive integers from 2 to 60 (since 62 is excluded).\",\n        \"Recognize that even positive integers less than 62 are 2, 4, 6, ..., 60, which can be written as 2k where k = 1, 2, 3, ..., 30.\",\n        \"Factor out 2 from the sum to get 2(1 + 2 + 3 + ... + 30).\",\n        \"Apply the arithmetic series formula: sum of first n natural numbers is n(n+1)/2, where n = 30.\",\n        \"Calculate 2 \u00d7 30 \u00d7 31 / 2 = 930.\"\n    ],\n    \"pseudocode\": \"def sum_even_positive_less_than_62():\\n    upper_limit = 62\\n    last_even = 60\\n    n = last_even / 2\\n    sum_natural = n * (n + 1) / 2\\n    result = 2 * sum_natural\\n    return result\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 29, "response": "{\n    \"reasoning_steps\": [\n        \"Use the definition of a parabola: for any point P on the parabola, the distance from P to the focus equals the distance from P to the directrix.\",\n        \"Since the vertex is at (0,0) and focus is at (0,1), the directrix must be the horizontal line y = -1.\",\n        \"For a point P = (x,y) on the parabola, set up the equation PF = distance to directrix, which gives sqrt(x\u00b2 + (y-1)\u00b2) = y + 1.\",\n        \"Square both sides and simplify to derive the parabola's equation x\u00b2 = 4y.\",\n        \"Use the given condition PF = 101 to find that y + 1 = 101, so y = 100.\",\n        \"Substitute y = 100 into x\u00b2 = 4y to get x\u00b2 = 400, yielding x = 20 since P is in the first quadrant.\"\n    ],\n    \"pseudocode\": \"def find_point_on_parabola():\\n    vertex_x = 0\\n    vertex_y = 0\\n    focus_x = 0\\n    focus_y = 1\\n    directrix_y = -1\\n    given_distance = 101\\n    \\n    y = given_distance - 1\\n    x_squared = 4 * y\\n    x = sqrt(x_squared)\\n    \\n    return (x, y)\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 9\n}"}
{"qid": 30, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that hair length is a physical attribute that can be changed through cutting or styling, and does not inherently indicate personality traits or sexual orientation\",\n        \"Identify that stereotypes exist linking women's short hair to various characteristics, but these are social constructs without factual basis\",\n        \"Establish that the only factual statement about a woman with short hair is that her hair has been cut to a shorter length\",\n        \"Filter out any interpretations that assign meaning beyond the observable physical characteristic\"\n    ],\n    \"pseudocode\": \"def analyze_short_hair_meaning(observation):\\n    physical_fact = \\\"hair has been cut short\\\"\\n    stereotypes = [\\\"lesbian\\\", \\\"bisexual\\\", \\\"intelligent\\\", \\\"professional\\\", \\\"masculine\\\", \\\"breakup\\\"]\\n    valid_meanings = []\\n    valid_meanings.append(physical_fact)\\n    valid_meanings.append(\\\"may prefer short hair\\\")\\n    for stereotype in stereotypes:\\n        if has_factual_basis(stereotype, observation):\\n            valid_meanings.append(stereotype)\\n    return valid_meanings\\n\\ndef has_factual_basis(claim, observation):\\n    if claim == observation:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 31, "response": "{\n    \"reasoning_steps\": [\n        \"Set up the matrix equation by letting M = [[p, q], [r, s]] and compute the product M * [[a, b], [c, d]] using matrix multiplication rules.\",\n        \"Apply matrix multiplication: the (i,j) entry of the product is the dot product of row i of M with column j of the second matrix, yielding [[pa + qc, pb + qd], [ra + sc, rb + sd]].\",\n        \"Equate the resulting matrix to the target matrix [[a, b], [3c, 3d]] to obtain the system of equations: pa + qc = a, pb + qd = b, ra + sc = 3c, rb + sd = 3d.\",\n        \"Since these equations must hold for all values of a, b, c, d, compare coefficients: p = 1, q = 0 (from first row equations) and r = 0, s = 3 (from second row equations).\"\n    ],\n    \"pseudocode\": \"def find_transformation_matrix():\\n    p = 1\\n    q = 0\\n    r = 0\\n    s = 3\\n    M = [[p, q], [r, s]]\\n    return M\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 32, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that venomous snakebites require immediate professional medical intervention due to the complexity of venom effects on the body\",\n        \"Avoid harmful folk remedies like cutting the wound or attempting to suck out venom, which can worsen tissue damage and introduce infection\",\n        \"Prioritize rapid transport to a medical facility where antivenom and supportive care can be administered\",\n        \"Keep the affected limb immobilized and below heart level to slow venom spread through the lymphatic system\"\n    ],\n    \"pseudocode\": \"def treat_venomous_snakebite(bite_location):\\n    emergency_contacted = False\\n    if bite_location is not None:\\n        emergency_contacted = True\\n        call_emergency_services()\\n        immobilize_limb(bite_location)\\n        position_below_heart(bite_location)\\n        await_medical_transport()\\n    return emergency_contacted\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 33, "response": "{\n    \"reasoning_steps\": [\n        \"Recall the hierarchical classification system in biology, which organizes life from broadest to most specific: Domain \u2192 Kingdom \u2192 Phylum \u2192 Class \u2192 Order \u2192 Family \u2192 Genus \u2192 Species.\",\n        \"Identify that domains represent the highest taxonomic rank, established by Carl Woese based on fundamental cellular differences.\",\n        \"Recognize that the three domains (Bacteria, Archaea, and Eukarya) are distinguished by their most basic cellular characteristics, such as cell membrane composition and ribosomal RNA sequences.\",\n        \"Compare the given options and determine that domains are broader than kingdoms, phyla, or orders in the taxonomic hierarchy.\"\n    ],\n    \"pseudocode\": \"def find_broadest_taxonomic_group(options):\\n    taxonomic_hierarchy = ['domain', 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species']\\n    broadest_rank = -1\\n    broadest_option = None\\n    \\n    for option in options:\\n        option_lower = option.lower().rstrip('s')\\n        if option_lower in taxonomic_hierarchy:\\n            rank = taxonomic_hierarchy.index(option_lower)\\n            if broadest_rank == -1 or rank < broadest_rank:\\n                broadest_rank = rank\\n                broadest_option = option\\n    \\n    return broadest_option\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 34, "response": "{\n    \"reasoning_steps\": [\n        \"Use the substitution t = cos\u00b2(x) to transform the expression, noting that sin\u00b2(x) = 1 - t and the constraint 0 \u2264 t \u2264 1.\",\n        \"Expand (1-t)\u00b3 = 1 - 3t + 3t\u00b2 - t\u00b3 and (1-t)\u00b2 = 1 - 2t + t\u00b2 to simplify the numerator and denominator.\",\n        \"Perform polynomial long division of (3t\u00b2 - 3t + 2) by (2t\u00b2 - 2t + 2) to obtain the form 3/2 - 1/(2(t\u00b2 - t + 1)).\",\n        \"To minimize the original expression, maximize 1/(2(t\u00b2 - t + 1)), which requires minimizing the quadratic t\u00b2 - t + 1.\",\n        \"Find the minimum of t\u00b2 - t + 1 by taking the derivative and setting it to zero: d/dt(t\u00b2 - t + 1) = 2t - 1 = 0, giving t = 1/2.\",\n        \"Verify that t = 1/2 is in the valid range [0,1] and substitute back to get the minimum value 3/2 - 1/(2(1/4 - 1/2 + 1)) = 5/6.\"\n    ],\n    \"pseudocode\": \"def find_minimum_value():\\n    t = 0.5\\n    numerator = t**3 + (1 - t)**3 + 1\\n    denominator = t**2 + (1 - t)**2 + 1\\n    numerator_expanded = 3*t**2 - 3*t + 2\\n    denominator_expanded = 2*t**2 - 2*t + 2\\n    quotient = 1.5\\n    remainder_denominator = t**2 - t + 1\\n    remainder_denominator_at_min = 0.25 - 0.5 + 1\\n    minimum_value = quotient - 1 / (2 * remainder_denominator_at_min)\\n    return minimum_value\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 9\n}"}
{"qid": 35, "response": "{\n    \"reasoning_steps\": [\n        \"Distinguish between innate behaviors (genetically programmed) and learned behaviors (acquired through experience and training).\",\n        \"Recognize that barking, tail-wagging, and digging are instinctive behaviors that dogs exhibit naturally without training.\",\n        \"Identify that coming when called requires conditioning through repeated training sessions where the dog associates its name with a reward or positive outcome.\",\n        \"Conclude that responding to a specific verbal command represents a learned behavior acquired through operant conditioning.\"\n    ],\n    \"pseudocode\": \"def identify_learned_behavior(behaviors):\\n    innate_behaviors = ['barking', 'tail-wagging', 'digging a hole']\\n    learned_behaviors = ['coming when called']\\n    \\n    for behavior in behaviors:\\n        if behavior in learned_behaviors:\\n            return behavior\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 36, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about what brain scans showed humans respond rapidly to, which requires locating the specific finding about rapid responses in the text.\",\n        \"Locate the key sentence that states 'Brain scans showed humans can process and respond very quickly to signs of physical pain in others, but took longer to show admiration or compassion.'\",\n        \"Extract the specific finding that humans respond rapidly to 'signs of physical pain in others' as opposed to slower responses for admiration or compassion.\",\n        \"Return this finding as the answer to what scans show humans respond rapidly to.\"\n    ],\n    \"pseudocode\": \"def find_rapid_response(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_keywords(sentence, ['brain scans', 'respond', 'quickly', 'rapidly']):\\n            rapid_response = extract_rapid_response_object(sentence)\\n            return rapid_response\\n    return None\\n\\ndef contains_keywords(sentence, keywords):\\n    for keyword in keywords:\\n        if keyword in sentence:\\n            continue\\n        else:\\n            return False\\n    return True\\n\\ndef extract_rapid_response_object(sentence):\\n    if 'signs of physical pain in others' in sentence:\\n        return 'signs of physical pain in others'\\n    return None\",\n    \"loop_count\": 2,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 37, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that X_i are i.i.d. N(0,1) and we need to evaluate the limit of -1/n times the log likelihood under q(x) = N(1,1)\",\n        \"For a sequence X_1,...,X_n, the joint probability under q is the product of individual densities: q(X_1,...,X_n) = \u220fq(X_i)\",\n        \"Taking logarithm: log q(X_1,...,X_n) = \u2211log q(X_i), so -1/n log q(X_1,...,X_n) = -1/n \u2211log q(X_i)\",\n        \"By the Strong Law of Large Numbers, -1/n \u2211log q(X_i) converges to -E_p[log q(X)] where expectation is under p(x) = N(0,1)\",\n        \"Calculate -E_p[log q(X)] where q(x) = 1/\u221a(2\u03c0) exp(-(x-1)\u00b2/2) and p(x) = 1/\u221a(2\u03c0) exp(-x\u00b2/2)\",\n        \"log q(x) = -1/2 log(2\u03c0) - (x-1)\u00b2/2, so E_p[log q(X)] = -1/2 log(2\u03c0) - E_p[(X-1)\u00b2/2]\",\n        \"Since X ~ N(0,1), we have E[(X-1)\u00b2] = E[X\u00b2 - 2X + 1] = Var(X) + (E[X])\u00b2 - 2E[X] + 1 = 1 + 0 - 0 + 1 = 2\",\n        \"Therefore -E_p[log q(X)] = 1/2 log(2\u03c0) + 2/2 = 1/2 log(2\u03c0) + 1 \u2248 0.919 + 1 = 1.919, but this includes the normalization constant\",\n        \"The relative entropy D(p||q) = E_p[log p(X)/q(X)] = E_p[log p(X)] - E_p[log q(X)] = 1/2 since both are normal with unit variance\"\n    ],\n    \"pseudocode\": \"def calculate_limit(n, samples):\\n    sum_log_q = 0\\n    for i in range(n):\\n        x = samples[i]\\n        log_q_x = -0.5 * log(2 * pi) - 0.5 * (x - 1) * (x - 1)\\n        sum_log_q = sum_log_q + log_q_x\\n    limit_estimate = -sum_log_q / n\\n    return limit_estimate\\n\\ndef theoretical_limit():\\n    expectation_x_squared = 1\\n    expectation_x = 0\\n    expectation_x_minus_1_squared = expectation_x_squared - 2 * expectation_x + 1\\n    negative_expectation_log_q = 0.5 * log(2 * pi) + 0.5 * expectation_x_minus_1_squared\\n    return negative_expectation_log_q\",\n    \"loop_count\": 1,\n    \"branch_count\": 0,\n    \"variable_count\": 10\n}"}
{"qid": 38, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the First Amendment of the US Constitution protects freedom of speech and expression, which extends to musical recordings and albums\",\n        \"Understand that while individual stores or platforms may choose not to sell certain albums, this is different from government-imposed illegality\",\n        \"Acknowledge that obscenity laws exist but have an extremely high bar for prosecution and rarely apply to commercially distributed music albums\",\n        \"Conclude that no albums are categorically illegal to own, sell, or distribute in the United States at the federal level\"\n    ],\n    \"pseudocode\": \"def check_illegal_albums_in_US():\\n    first_amendment_protection = True\\n    commercial_music_albums = get_all_albums()\\n    illegal_albums = []\\n    \\n    for album in commercial_music_albums:\\n        if first_amendment_protection and is_artistic_expression(album):\\n            continue\\n        else:\\n            if meets_obscenity_standard(album) and lacks_artistic_merit(album):\\n                illegal_albums.append(album)\\n    \\n    return illegal_albums\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 4\n}"}
{"qid": 39, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the cargo information mentioned in the passage about the Arctic Sea ship\",\n        \"Locate the specific sentence that states what the ship was transporting\",\n        \"Extract the cargo details which include both the weight and the type of goods being carried from Finland to Algeria\"\n    ],\n    \"pseudocode\": \"def find_ship_cargo(text):\\n    sentences = split_into_sentences(text)\\n    cargo_info = \\\"\\\"\\n    for sentence in sentences:\\n        if contains_cargo_keywords(sentence):\\n            cargo_info = extract_cargo_details(sentence)\\n            if cargo_info != \\\"\\\":\\n                return cargo_info\\n    return cargo_info\\n\\ndef contains_cargo_keywords(sentence):\\n    keywords = [\\\"carrying\\\", \\\"cargo\\\", \\\"transport\\\"]\\n    for keyword in keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef extract_cargo_details(sentence):\\n    if \\\"carrying\\\" in sentence and \\\"cargo\\\" in sentence:\\n        start_index = find_index_after(\\\"carrying\\\", sentence)\\n        end_index = find_index_before(\\\"from\\\", sentence)\\n        return sentence[start_index:end_index]\\n    return \\\"\\\"\",\n    \"loop_count\": 2,\n    \"branch_count\": 5,\n    \"variable_count\": 8\n}"}
{"qid": 40, "response": "{\n    \"reasoning_steps\": [\n        \"To determine if photoperiod (not temperature) causes coat shedding, we need to isolate photoperiod as the only changing variable while keeping temperature constant\",\n        \"In a controlled experiment, when testing for a single factor's effect, all other variables must remain constant to establish causation\",\n        \"If horses shed their coats when photoperiod varies but temperature remains constant, this proves photoperiod is the causal factor\",\n        \"Evaluate each experimental condition to find which isolates photoperiod as the only variable\"\n    ],\n    \"pseudocode\": \"def determine_experimental_condition(choices):\\n    correct_condition = None\\n    for choice in choices:\\n        photoperiod_status = extract_photoperiod_status(choice)\\n        temperature_status = extract_temperature_status(choice)\\n        if photoperiod_status == \\\"varied\\\" and temperature_status == \\\"constant\\\":\\n            correct_condition = choice\\n            break\\n    return correct_condition\\n\\ndef extract_photoperiod_status(choice_text):\\n    if \\\"varied photoperiod\\\" in choice_text:\\n        return \\\"varied\\\"\\n    elif \\\"constant photoperiod\\\" in choice_text:\\n        return \\\"constant\\\"\\n    return None\\n\\ndef extract_temperature_status(choice_text):\\n    if \\\"varied temperature\\\" in choice_text:\\n        return \\\"varied\\\"\\n    elif \\\"constant temperature\\\" in choice_text:\\n        return \\\"constant\\\"\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 5,\n    \"variable_count\": 5\n}"}
{"qid": 41, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that bottles labeled 'Drink me' in reality have unknown contents that could be harmful substances, poisons, or intoxicants\",\n        \"Consider the range of physiological effects from consuming unknown liquids: illness, intoxication, unconsciousness, or death\",\n        \"Distinguish between fictional references (Alice in Wonderland where drinking causes size changes) and real-world safety concerns\"\n    ],\n    \"pseudocode\": \"def evaluate_drink_me_bottle():\\n    possible_outcomes = []\\n    substance_unknown = True\\n    if substance_unknown:\\n        possible_outcomes.append('may get sick')\\n        possible_outcomes.append('may die')\\n        possible_outcomes.append('may get drunk')\\n        possible_outcomes.append('may black out')\\n    return possible_outcomes\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 42, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks specifically about an actor who wrote about Castro's brother being open to a meeting\",\n        \"Locate the paragraph mentioning 'actor Sean Penn' and his conversation with Ra\u00fal Castro, who is Fidel Castro's brother\",\n        \"Extract that Sean Penn wrote in The Nation about Ra\u00fal Castro expressing openness to meet with Obama\",\n        \"Return 'Penn' as the actor who reported this information\"\n    ],\n    \"pseudocode\": \"def find_actor_who_wrote_about_castro_brother(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_actor_reference(sentence) and contains_castro_brother_reference(sentence):\\n            actor_name = extract_actor_name(sentence)\\n            return actor_name\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 43, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that whales rely on vocalization for navigation and communication with other whales, particularly for maintaining contact across distances.\",\n        \"Understand that noise pollution creates acoustic interference that can mask or disrupt whale vocalizations, reducing their effective communication range.\",\n        \"Deduce that impaired communication would most directly affect whales' ability to maintain contact with family members, leading to separation of groups that normally stay together through vocal coordination.\"\n    ],\n    \"pseudocode\": \"def analyze_noise_pollution_effect(whale_behaviors, pollution_type):\\n    communication_methods = []\\n    for behavior in whale_behaviors:\\n        if behavior == \\\"vocalization\\\":\\n            communication_methods.append(behavior)\\n    \\n    if pollution_type == \\\"noise\\\" and \\\"vocalization\\\" in communication_methods:\\n        primary_effect = \\\"communication_disruption\\\"\\n        \\n        if primary_effect == \\\"communication_disruption\\\":\\n            consequence = \\\"separation_of_family_groups\\\"\\n            return consequence\\n    \\n    return \\\"no_direct_effect\\\"\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 44, "response": "{\n    \"reasoning_steps\": [\n        \"Introduce a substitution q(x) = p(x) - 1 to simplify the functional equation, transforming p(x) = q(x) + 1.\",\n        \"Substitute p(x) = q(x) + 1 into the original functional equation and expand to derive that q(xy) = q(x)q(y), which is Cauchy's multiplicative functional equation.\",\n        \"Use the given condition p(2) = 5 to find q(2) = 4 = 2^2.\",\n        \"Apply the multiplicative property q(xy) = q(x)q(y) recursively to compute q(2^n) = 2^{2n} = (2^n)^2 for all positive integers n.\",\n        \"Since q(x) = x^2 holds for infinitely many values (all powers of 2), and q is continuous (as p has real coefficients), by the Identity Theorem for polynomials, q(x) = x^2 for all x.\",\n        \"Convert back to find p(x) = q(x) + 1 = x^2 + 1.\"\n    ],\n    \"pseudocode\": \"def find_polynomial():\\n    # Let q(x) = p(x) - 1\\n    # From functional equation: q(xy) = q(x)q(y)\\n    # From p(2) = 5: q(2) = 4\\n    \\n    # Verify pattern for powers of 2\\n    base = 2\\n    q_base = 4\\n    \\n    n = 1\\n    while n <= 10:\\n        value = base ** n\\n        q_value = (value) ** 2\\n        expected = q_base ** n\\n        \\n        if n == 1:\\n            if q_value != q_base:\\n                return None\\n        \\n        n = n + 1\\n    \\n    # q(x) = x^2 for all x\\n    # Therefore p(x) = x^2 + 1\\n    \\n    return \\\"x^2 + 1\\\"\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 45, "response": "{\n    \"reasoning_steps\": [\n        \"Define b_n = a_{n+1} - a_n and derive the recurrence relation b_n = 11b_{n-1} - 1 by substituting the given recurrence for a_n.\",\n        \"Solve the recurrence b_n - 1/10 = 11(b_{n-1} - 1/10) to find that b_n = 11^{n-1}(b_1 - 1/10) + 1/10.\",\n        \"For the sequence a_n to remain positive for all n, we need b_n \u2265 0 for all n, which requires b_1 \u2265 1/10.\",\n        \"Since b_1 = a_2 - a_1 = 11a_1 - 2 - a_1 = 10a_1 - 2, the constraint b_1 \u2265 1/10 gives us a_1 \u2265 21/100.\",\n        \"Verify that when a_1 = 21/100, we have b_n = 1/10 for all n, making the sequence a_n increasing and positive.\"\n    ],\n    \"pseudocode\": \"def find_minimum_a1():\\n    # Define b_n = a_{n+1} - a_n\\n    # From recurrence: b_n = 11b_{n-1} - 1\\n    # Solving: b_n - 1/10 = 11(b_{n-1} - 1/10)\\n    \\n    # For positive sequence, need b_n >= 0 for all n\\n    # This requires b_1 >= 1/10\\n    \\n    # Since b_1 = a_2 - a_1 = 10a_1 - 2\\n    # We need 10a_1 - 2 >= 1/10\\n    # Therefore a_1 >= 21/100\\n    \\n    min_a1 = 21/100\\n    \\n    # Verify: when a_1 = 21/100\\n    b_1 = 10 * min_a1 - 2\\n    if b_1 == 1/10:\\n        # All b_n = 1/10, sequence is increasing\\n        return min_a1\\n    \\n    return min_a1\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 46, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that this is a meta-question about the system's current cognitive state or thoughts\",\n        \"Understand that as an AI system, I don't have subjective experiences, emotions, or a stream of consciousness like humans do\",\n        \"Determine that the only accurate response is to acknowledge the lack of personal thoughts or decline to comment on non-existent mental states\",\n        \"Return an appropriate response that reflects the absence of subjective mental content\"\n    ],\n    \"pseudocode\": \"def respond_to_mind_query():\\n    is_ai_system = True\\n    has_subjective_thoughts = False\\n    \\n    if is_ai_system and not has_subjective_thoughts:\\n        valid_responses = [\\\"I have no comment\\\", \\\"I don't have anything on my mind\\\", \\\"I am computing the answer to this question\\\"]\\n        response = valid_responses[0]\\n    else:\\n        response = \\\"Invalid state\\\"\\n    \\n    return response\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 47, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that washing raw chicken can spread bacteria like Campylobacter and Salmonella through water splashing onto surfaces and utensils\",\n        \"Understand that cooking chicken to the proper internal temperature of 165\u00b0F (74\u00b0C) kills harmful bacteria without the need for washing\",\n        \"Apply food safety guidelines from health organizations that specifically advise against washing raw poultry\"\n    ],\n    \"pseudocode\": \"def should_wash_chicken():\\n    bacteria_types = ['Campylobacter', 'Salmonella']\\n    safe_cooking_temp = 165\\n    washing_spreads_bacteria = True\\n    \\n    if washing_spreads_bacteria:\\n        recommendation = 'Do not wash chicken'\\n    else:\\n        recommendation = 'Wash chicken'\\n    \\n    return recommendation\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 48, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the question asks for a universal fact about all East Coast residents lying about something specific\",\n        \"Apply the logical principle that universal claims about diverse populations are typically false - no single behavior applies to every member of a large, heterogeneous group\",\n        \"Determine that since no fact exists that everyone on the East Coast lies about, the function should return a statement indicating no such universal fact exists\"\n    ],\n    \"pseudocode\": \"def find_universal_east_coast_lie():\\n    universal_facts = []\\n    east_coast_population = get_east_coast_residents()\\n    \\n    for potential_fact in all_possible_facts:\\n        lies_about_fact = True\\n        for person in east_coast_population:\\n            if not person_lies_about(person, potential_fact):\\n                lies_about_fact = False\\n                break\\n        if lies_about_fact:\\n            universal_facts.append(potential_fact)\\n    \\n    if len(universal_facts) == 0:\\n        return \\\"There is no such fact\\\"\\n    else:\\n        return universal_facts[0]\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 6\n}"}
{"qid": 49, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that belief in witches as supernatural beings is not supported by scientific evidence or modern understanding of reality\",\n        \"Identify that the question presents a false premise that requires protection from witches, when no such supernatural threat exists\",\n        \"Determine that the appropriate response is to acknowledge the non-existence of witches rather than suggest protective measures\",\n        \"If someone genuinely believes they need protection from witches, recommend seeking professional help to address potential underlying issues\"\n    ],\n    \"pseudocode\": \"def handle_witch_concern(belief_in_witches):\\n    witches_exist = False\\n    \\n    if belief_in_witches == True:\\n        if witches_exist == False:\\n            response = \\\"No protection needed - witches do not exist\\\"\\n            professional_help_needed = True\\n        else:\\n            response = \\\"Evaluate evidence\\\"\\n            professional_help_needed = False\\n    else:\\n        response = \\\"No concern necessary\\\"\\n        professional_help_needed = False\\n    \\n    if professional_help_needed == True:\\n        recommendation = \\\"Consider speaking with a professional\\\"\\n    else:\\n        recommendation = \\\"No action required\\\"\\n    \\n    return response, recommendation\",\n    \"loop_count\": 0,\n    \"branch_count\": 5,\n    \"variable_count\": 5\n}"}
{"qid": 50, "response": "{\n    \"reasoning_steps\": [\n        \"Apply the product-to-sum formula sin(1/2)sin(k) = (1/2)[cos(k-1/2) - cos(k+1/2)] to rewrite each sin(k) term as a telescoping difference.\",\n        \"Express a_n as a telescoping sum that simplifies to (cos(1/2) - cos((2n+1)/2))/(2sin(1/2)).\",\n        \"Determine that a_n < 0 when cos(1/2) < cos((2n+1)/2), which occurs when (2n+1)/2 is closer to 0 modulo 2\u03c0 than 1/2 is.\",\n        \"Solve the inequality 2\u03c0k - 1/2 < (2n+1)/2 < 2\u03c0k + 1/2 to get n = floor(2\u03c0k) for positive integers k.\",\n        \"Calculate floor(2\u03c0 \u00d7 100) = floor(628.318...) = 628 to find the index of the 100th negative term.\"\n    ],\n    \"pseudocode\": \"def find_100th_negative_index():\\n    pi = 3.14159265359\\n    count = 0\\n    k = 1\\n    \\n    while count < 100:\\n        n = floor(2 * pi * k)\\n        count = count + 1\\n        if count == 100:\\n            return n\\n        k = k + 1\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 51, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for the definition of 'immaculate conception', which is a specific Catholic theological doctrine\",\n        \"Recall that immaculate conception refers to Mary being conceived without original sin, not to Jesus's virgin birth as commonly misunderstood\",\n        \"Distinguish between the immaculate conception (Mary's conception without sin) and the virgin birth (Jesus's birth from Mary)\",\n        \"Return the correct theological definition that Mary was free from original sin from the moment of her conception\"\n    ],\n    \"pseudocode\": \"def define_immaculate_conception():\\n    catholic_doctrine = \\\"Mary was free of original sin from the moment of her conception\\\"\\n    common_misconception = \\\"Jesus's virgin birth\\\"\\n    if question_asks_about_immaculate_conception:\\n        correct_definition = catholic_doctrine\\n        return correct_definition\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 52, "response": "{\n    \"reasoning_steps\": [\n        \"Identify European cities by population, noting that Istanbul spans Europe and Asia with its European part containing millions of residents\",\n        \"For each major European city, determine whether it hosts the national government by checking if it serves as the country's capital\",\n        \"Istanbul has over 15 million residents but Turkey's capital is Ankara, making Istanbul the largest non-capital city in Europe\",\n        \"Compare Istanbul's population to other large non-capital European cities like Hamburg, Barcelona, and Milan to confirm it is the largest\"\n    ],\n    \"pseudocode\": \"def find_largest_non_capital_european_city():\\n    european_cities = [\\n        {\\\"name\\\": \\\"Istanbul\\\", \\\"population\\\": 15000000, \\\"is_capital\\\": False},\\n        {\\\"name\\\": \\\"Moscow\\\", \\\"population\\\": 12000000, \\\"is_capital\\\": True},\\n        {\\\"name\\\": \\\"London\\\", \\\"population\\\": 9000000, \\\"is_capital\\\": True},\\n        {\\\"name\\\": \\\"Barcelona\\\", \\\"population\\\": 5500000, \\\"is_capital\\\": False},\\n        {\\\"name\\\": \\\"Hamburg\\\", \\\"population\\\": 1900000, \\\"is_capital\\\": False}\\n    ]\\n    \\n    largest_non_capital = None\\n    max_population = 0\\n    \\n    for city in european_cities:\\n        if not city[\\\"is_capital\\\"]:\\n            if city[\\\"population\\\"] > max_population:\\n                max_population = city[\\\"population\\\"]\\n                largest_non_capital = city[\\\"name\\\"]\\n    \\n    return largest_non_capital\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 53, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that this is a reading comprehension task requiring extraction of a specific quote from the given text about what Nancy Grace says about the main character.\",\n        \"Scan the text for direct quotes from Nancy Grace about her main character Hailey Dean.\",\n        \"Locate the specific quote where Grace compares herself to Hailey: 'Hailey is a much better person than I am,' which appears twice in the text.\",\n        \"Extract and return this exact quote as it directly answers what Grace says about the main character.\"\n    ],\n    \"pseudocode\": \"def find_grace_quote_about_character(text):\\n    quotes = []\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_quote(sentence) and contains_grace_speaking(sentence):\\n            if mentions_hailey_or_main_character(sentence):\\n                quote = extract_quote(sentence)\\n                quotes.append(quote)\\n    return quotes\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 54, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that density is defined as mass divided by volume (\u03c1 = m/V), requiring measurement of both mass and volume\",\n        \"Identify that a balance is the standard instrument for measuring mass in grams or kilograms\",\n        \"Recognize that for irregular solid objects like rocks, volume is best measured using water displacement method with a graduated cylinder\",\n        \"Determine that the combination of graduated cylinder and balance provides both required measurements for density calculation\"\n    ],\n    \"pseudocode\": \"def determine_density_equipment():\\n    mass_instrument = \\\"balance\\\"\\n    volume_instrument = \\\"graduated_cylinder\\\"\\n    required_equipment = [mass_instrument, volume_instrument]\\n    return required_equipment\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 55, "response": "{\n    \"reasoning_steps\": [\n        \"Interpret the expression geometrically: sqrt(x^2 + (1-x)^2) represents the distance from point P=(x,x) to point A=(0,1), and sqrt((1-x)^2 + (1+x)^2) represents the distance from P=(x,x) to point B=(1,-1).\",\n        \"Apply the triangle inequality theorem: for any three points, the sum of distances AP + BP is minimized when P lies on the line segment AB.\",\n        \"Find the intersection of line y=x with line AB by setting up the parametric equation for line AB and solving for the parameter when the x and y coordinates are equal.\",\n        \"Calculate the minimum distance AB using the distance formula between points A=(0,1) and B=(1,-1).\"\n    ],\n    \"pseudocode\": \"def find_minimum_value():\\n    A_x = 0\\n    A_y = 1\\n    B_x = 1\\n    B_y = -1\\n    \\n    min_distance = sqrt((B_x - A_x)^2 + (B_y - A_y)^2)\\n    \\n    return min_distance\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 56, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of Max Gilpin's name to locate relevant information about him\",\n        \"Identify the sentence that contains both 'Max Gilpin' and numerical age information\",\n        \"Extract the age value that directly follows or is associated with Max Gilpin's name in the text\"\n    ],\n    \"pseudocode\": \"def find_max_gilpin_age(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_name(sentence, \\\"Max Gilpin\\\"):\\n            age = extract_age_from_sentence(sentence)\\n            if age is not None:\\n                return age\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 57, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the SAT scoring system awards points for correct answers and the maximum score is achieved when all questions are answered correctly\",\n        \"Identify that there are multiple valid approaches to achieving a perfect score, including thorough preparation, natural aptitude, or a combination of both\",\n        \"Establish that while methods may vary, the fundamental requirement remains answering every question correctly to achieve the maximum possible score\"\n    ],\n    \"pseudocode\": \"def get_perfect_sat_score_methods():\\n    methods = []\\n    correct_answers_required = total_questions\\n    \\n    if study_hard():\\n        methods.append(\\\"studying hard\\\")\\n    if naturally_gifted():\\n        methods.append(\\\"being unusually gifted\\\")\\n    if combination_approach():\\n        methods.append(\\\"combination of preparation and aptitude\\\")\\n    \\n    for method in methods:\\n        if achieves_all_correct_answers(method):\\n            return True\\n    \\n    return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 4,\n    \"variable_count\": 3\n}"}
{"qid": 58, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific allegation about weapons being that employees illegally purchased weapons and sold them in Iraq, according to U.S. government sources\",\n        \"Locate the statement about who provided information regarding individual employee involvement rather than company involvement\",\n        \"Extract the source that specified the investigation focuses on individual company employees, not the firm itself\"\n    ],\n    \"pseudocode\": \"def find_source_of_employee_allegation(text):\\n    allegations = extract_weapon_allegations(text)\\n    for statement in text:\\n        if contains_employee_focus(statement) and contains_source_attribution(statement):\\n            source = extract_source(statement)\\n            return source\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 59, "response": "{\n    \"reasoning_steps\": [\n        \"Set up a coordinate system with vertex A at the origin and adjacent vertices at (10,0,0), (0,10,0), and (0,0,10).\",\n        \"Express the plane equation as ax + by + cz + d = 0 where a\u00b2 + b\u00b2 + c\u00b2 = 1, and note that the distance from a point (x,y,z) to this plane is ax + by + cz + d.\",\n        \"Use the given heights to establish that the distances from the three adjacent vertices to the plane are 10, 11, and 12, yielding equations 10a + d = 10, 10b + d = 11, and 10c + d = 12.\",\n        \"Solve for a, b, c in terms of d: 10a = 10 - d, 10b = 11 - d, 10c = 12 - d.\",\n        \"Apply the constraint a\u00b2 + b\u00b2 + c\u00b2 = 1 by substituting the expressions for a, b, c to get (10-d)\u00b2 + (11-d)\u00b2 + (12-d)\u00b2 = 100.\",\n        \"Expand and solve the quadratic equation to find d = 11 \u00b1 7\u221a(2/3).\",\n        \"Since d represents the distance from A to the plane and must be less than 10 (as A is the closest vertex), choose d = 11 - 7\u221a(2/3).\",\n        \"Simplify the expression to get d = (33 - \u221a294)/3, identifying r = 33, s = 294, t = 3.\"\n    ],\n    \"pseudocode\": \"def find_distance_parameters():\\n    d_squared_coefficient = 3\\n    d_coefficient = -66\\n    constant_term = 245\\n    \\n    discriminant = d_coefficient * d_coefficient - 4 * d_squared_coefficient * constant_term\\n    sqrt_discriminant = sqrt(discriminant)\\n    \\n    d_plus = (-d_coefficient + sqrt_discriminant) / (2 * d_squared_coefficient)\\n    d_minus = (-d_coefficient - sqrt_discriminant) / (2 * d_squared_coefficient)\\n    \\n    if d_minus < 10:\\n        d = d_minus\\n    else:\\n        d = d_plus\\n    \\n    numerator_constant = 33\\n    under_sqrt = 294\\n    denominator = 3\\n    \\n    result = numerator_constant + under_sqrt + denominator\\n    return result\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 12\n}"}
{"qid": 60, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the question references the common idiom 'cats have nine lives' but requires a factual biological answer\",\n        \"Apply the biological principle that all living organisms, including cats, have exactly one life that ends with a single death event\",\n        \"Distinguish between the metaphorical meaning (cats surviving dangerous situations) and the literal biological fact\",\n        \"Return the factual answer that a cat can die only once\"\n    ],\n    \"pseudocode\": \"def how_many_times_can_cat_die():\\n    biological_lives = 1\\n    death_events_possible = biological_lives\\n    return death_events_possible\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 2\n}"}
{"qid": 61, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of cost concerns, specifically looking for individuals or groups who expressed worry about financial implications\",\n        \"Identify that New York Mayor Michael Bloomberg explicitly mentioned cost concerns, stating 'It's going to cost an awful lot of money and disturb a lot of people'\",\n        \"Note that the text mentions 'other politicians' alongside Bloomberg who expressed concern over costs and disruption\",\n        \"Verify that New York police estimated costs would exceed $200 million per year, supporting the cost concern narrative\"\n    ],\n    \"pseudocode\": \"def find_cost_concerned_parties(text):\\n    concerned_parties = []\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_cost_concern_keywords(sentence):\\n            entities = extract_entities(sentence)\\n            for entity in entities:\\n                if is_person_or_group(entity):\\n                    concerned_parties.append(entity)\\n    return concerned_parties\\n\\ndef contains_cost_concern_keywords(sentence):\\n    keywords = ['cost', 'expensive', 'money', 'financial']\\n    for keyword in keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef extract_entities(sentence):\\n    entities = []\\n    words = split_into_words(sentence)\\n    for i in range(len(words)):\\n        if is_proper_noun(words[i]):\\n            entity = words[i]\\n            j = i + 1\\n            while j < len(words) and is_proper_noun(words[j]):\\n                entity = entity + ' ' + words[j]\\n                j = j + 1\\n            entities.append(entity)\\n    return entities\\n\\ndef is_person_or_group(entity):\\n    person_indicators = ['Mayor', 'Commissioner', 'politicians']\\n    for indicator in person_indicators:\\n        if indicator in entity:\\n            return True\\n    return False\",\n    \"loop_count\": 5,\n    \"branch_count\": 6,\n    \"variable_count\": 13\n}"}
{"qid": 62, "response": "{\n    \"reasoning_steps\": [\n        \"Let y = \u221b(2 - x), which transforms the equation into y + \u221a(1 - y\u00b3) = 1 by substituting x = 2 - y\u00b3\",\n        \"Isolate the square root term to get \u221a(1 - y\u00b3) = 1 - y, then square both sides to eliminate the radical\",\n        \"Expand (1 - y)\u00b2 and simplify to obtain y\u00b3 + y\u00b2 - 2y = 0, which factors as y(y - 1)(y + 2) = 0\",\n        \"Solve for y to get y \u2208 {0, 1, -2}, then convert back to x using x = 2 - y\u00b3\",\n        \"Verify each solution satisfies the original equation by checking that both radicals are defined and the equation holds\"\n    ],\n    \"pseudocode\": \"def solve_radical_equation():\\n    solutions = []\\n    \\n    # Step 1: Solve factored equation y(y-1)(y+2) = 0\\n    y_values = [0, 1, -2]\\n    \\n    for y in y_values:\\n        # Step 2: Convert y back to x using x = 2 - y\u00b3\\n        x = 2 - y * y * y\\n        \\n        # Step 3: Verify solution\\n        if x >= 1:  # Check domain: x - 1 >= 0\\n            cube_root_term = (2 - x) ** (1/3)\\n            sqrt_term = (x - 1) ** 0.5\\n            \\n            if abs(cube_root_term + sqrt_term - 1) < 0.0001:\\n                solutions.append(x)\\n    \\n    return solutions\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 63, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that this quote is commonly misattributed to Sigmund Freud, who was known for psychoanalytic interpretations of symbols\",\n        \"Establish that no reliable historical source documents Freud actually saying this phrase\",\n        \"Determine that the true origin of the quote remains unknown despite its widespread attribution\"\n    ],\n    \"pseudocode\": \"def identify_quote_origin(quote):\\n    known_misattributions = {\\n        \\\"Sometimes a cigar is just a cigar\\\": \\\"Sigmund Freud\\\"\\n    }\\n    verified_sources = {}\\n    \\n    if quote in known_misattributions:\\n        misattributed_to = known_misattributions[quote]\\n        if quote not in verified_sources:\\n            return \\\"Unknown origin, often misattributed to \\\" + misattributed_to\\n    \\n    return \\\"Origin unknown\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 64, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that 8^x = (2^3)^x = 2^(3x), 27^x = (3^3)^x = 3^(3x), 12^x = (2^2 \u00b7 3)^x = 2^(2x) \u00b7 3^x, and 18^x = (2 \u00b7 3^2)^x = 2^x \u00b7 3^(2x).\",\n        \"Substitute a = 2^x and b = 3^x to transform the equation into (a^3 + b^3)/(a^2\u00b7b + a\u00b7b^2) = 7/6.\",\n        \"Factor the numerator using the sum of cubes formula: a^3 + b^3 = (a + b)(a^2 - ab + b^2), and factor the denominator as ab(a + b).\",\n        \"Cancel the common factor (a + b) from numerator and denominator, yielding (a^2 - ab + b^2)/(ab) = 7/6.\",\n        \"Cross-multiply to get 6(a^2 - ab + b^2) = 7ab, which simplifies to 6a^2 - 13ab + 6b^2 = 0.\",\n        \"Factor the quadratic equation as (2a - 3b)(3a - 2b) = 0, giving two cases: 2a = 3b or 3a = 2b.\",\n        \"For case 1 (2a = 3b), substitute back to get 2^(x+1) = 3^(x+1), which means (2/3)^(x+1) = 1, so x+1 = 0 and x = -1.\",\n        \"For case 2 (3a = 2b), substitute back to get 3\u00b72^x = 2\u00b73^x, which means (2/3)^(x-1) = 1, so x-1 = 0 and x = 1.\"\n    ],\n    \"pseudocode\": \"def solve_equation():\\n    solutions = []\\n    \\n    a = 2^x\\n    b = 3^x\\n    \\n    numerator = a^3 + b^3\\n    denominator = a^2 * b + a * b^2\\n    \\n    numerator_factored = (a + b) * (a^2 - a*b + b^2)\\n    denominator_factored = a * b * (a + b)\\n    \\n    simplified_numerator = a^2 - a*b + b^2\\n    simplified_denominator = a * b\\n    \\n    quadratic_coeffs = [6, -13, 6]\\n    \\n    if 2*a == 3*b:\\n        x_val = -1\\n        solutions.append(x_val)\\n    \\n    if 3*a == 2*b:\\n        x_val = 1\\n        solutions.append(x_val)\\n    \\n    return solutions\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 10\n}"}
{"qid": 65, "response": "{\n    \"reasoning_steps\": [\n        \"Rearrange the equation x\u00b2 = -4x to standard form by moving all terms to one side: x\u00b2 + 4x = 0\",\n        \"Factor the quadratic expression by extracting the common factor x: x(x + 4) = 0\",\n        \"Apply the zero product property: if ab = 0, then either a = 0 or b = 0, giving us x = 0 or x + 4 = 0\",\n        \"Solve x + 4 = 0 to get x = -4, so the two solutions are x = 0 and x = -4\",\n        \"Check which solutions are nonnegative by testing if each solution is greater than or equal to 0\"\n    ],\n    \"pseudocode\": \"def count_nonnegative_solutions():\\n    solutions = [0, -4]\\n    count = 0\\n    for x in solutions:\\n        if x >= 0:\\n            count = count + 1\\n    return count\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 66, "response": "{\n    \"reasoning_steps\": [\n        \"Construct the adjacency representation of the undirected graph from the given edges to identify all vertices and their connections\",\n        \"Apply the vertex cover definition: a set of vertices such that every edge in the graph has at least one endpoint in the set\",\n        \"Use a greedy approach by selecting vertices with the highest degree first, as they cover the most edges\",\n        \"Verify that the selected vertices form a valid vertex cover by checking that all edges have at least one endpoint in the set\",\n        \"Minimize the vertex cover by removing any redundant vertices while maintaining coverage of all edges\"\n    ],\n    \"pseudocode\": \"def find_minimum_vertex_cover(edges):\\n    vertices = set()\\n    adjacency = {}\\n    \\n    for edge in edges:\\n        u = edge[0]\\n        v = edge[1]\\n        vertices.add(u)\\n        vertices.add(v)\\n        if u not in adjacency:\\n            adjacency[u] = []\\n        if v not in adjacency:\\n            adjacency[v] = []\\n        adjacency[u].append(v)\\n        adjacency[v].append(u)\\n    \\n    uncovered_edges = set(edges)\\n    vertex_cover = set()\\n    \\n    while len(uncovered_edges) > 0:\\n        max_degree = -1\\n        best_vertex = -1\\n        \\n        for v in vertices:\\n            if v in vertex_cover:\\n                continue\\n            degree = 0\\n            for edge in uncovered_edges:\\n                if v == edge[0] or v == edge[1]:\\n                    degree = degree + 1\\n            if degree > max_degree:\\n                max_degree = degree\\n                best_vertex = v\\n        \\n        vertex_cover.add(best_vertex)\\n        edges_to_remove = []\\n        \\n        for edge in uncovered_edges:\\n            if best_vertex == edge[0] or best_vertex == edge[1]:\\n                edges_to_remove.append(edge)\\n        \\n        for edge in edges_to_remove:\\n            uncovered_edges.remove(edge)\\n    \\n    result = sorted(list(vertex_cover))\\n    return result\",\n    \"loop_count\": 5,\n    \"branch_count\": 6,\n    \"variable_count\": 14\n}"}
{"qid": 67, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the broadcasting entity mentioned in the text by locating references to media organizations.\",\n        \"The text explicitly states 'CNN International expands its environmental coverage this year with special Earth Day reports on April 22'.\",\n        \"CNN International is a division of CNN, so the answer is CNN.\"\n    ],\n    \"pseudocode\": \"def find_earth_day_broadcaster(text):\\n    sentences = split_into_sentences(text)\\n    broadcaster = \\\"\\\"\\n    for sentence in sentences:\\n        if contains_earth_day_reference(sentence):\\n            if contains_broadcaster_name(sentence):\\n                broadcaster = extract_broadcaster_name(sentence)\\n                break\\n    return broadcaster\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 68, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that height, weight, and coat color are genetically inherited traits determined by DNA passed from parents to offspring\",\n        \"Recognize that preferred food is a learned behavior acquired through experience and environmental factors, not encoded in genetic material\",\n        \"Conclude that while physical characteristics are inherited through genes, behavioral preferences like food choices are not genetically predetermined\"\n    ],\n    \"pseudocode\": \"def identify_non_inherited_trait(traits):\\n    inherited_traits = ['height', 'weight', 'coat_color']\\n    non_inherited_traits = ['preferred_food']\\n    \\n    for trait in traits:\\n        if trait in non_inherited_traits:\\n            return trait\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 69, "response": "{\n    \"reasoning_steps\": [\n        \"Set up a system of equations by evaluating P(x) = P(0) + P(1)x + P(2)x\u00b2 at x = -1, x = 1, and x = 2, using the given condition P(-1) = 1\",\n        \"From the polynomial form, derive that P(1) = P(0) + P(1) + P(2) and P(2) = P(0) + 2P(1) + 4P(2)\",\n        \"Solve the resulting 3\u00d73 linear system for the unknowns P(0), P(1), and P(2) using substitution or elimination\",\n        \"Construct the final polynomial P(x) = P(2)x\u00b2 + P(1)x + P(0) using the solved coefficient values\"\n    ],\n    \"pseudocode\": \"def find_polynomial():\\n    # Set up system of equations from P(x) = P(0) + P(1)x + P(2)x\u00b2\\n    # Equation 1: P(-1) = 1\\n    # P(0) - P(1) + P(2) = 1\\n    \\n    # Equation 2: P(1) = P(0) + P(1) + P(2)\\n    # This simplifies to P(0) + P(2) = 0\\n    \\n    # Equation 3: P(2) = P(0) + 2P(1) + 4P(2)\\n    # This simplifies to P(0) + 2P(1) + 3P(2) = 0\\n    \\n    # From equation 2: P(0) = -P(2)\\n    # Substitute into equation 1: -P(2) - P(1) + P(2) = 1\\n    # This gives: P(1) = -1\\n    \\n    # Substitute P(0) = -P(2) and P(1) = -1 into equation 3:\\n    # -P(2) + 2(-1) + 3P(2) = 0\\n    # 2P(2) - 2 = 0\\n    # P(2) = 1\\n    \\n    # Therefore P(0) = -1\\n    \\n    P_0 = -1\\n    P_1 = -1\\n    P_2 = 1\\n    \\n    return P_2, P_1, P_0\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 70, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that a meter stick is a linear measurement tool used to measure length or distance in units like meters or centimeters.\",\n        \"Evaluate each property: mass requires a scale or balance, volume requires a graduated cylinder or similar container, temperature requires a thermometer, and length requires a linear measuring tool.\",\n        \"Recognize that among the given options, only the length of a branch is a linear dimension that can be directly measured by placing a meter stick alongside it.\"\n    ],\n    \"pseudocode\": \"def find_measurable_property(properties, measuring_tool):\\n    meter_stick_measures = ['length', 'distance', 'height', 'width']\\n    for property in properties:\\n        if property_type(property) in meter_stick_measures:\\n            return property\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 71, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about the current relationship status between Rihanna and Chris Brown\",\n        \"Scan the text for information about their relationship status after the February 8 assault incident\",\n        \"Locate the specific sentence that addresses whether they reunited: 'Media reports have said the couple has reunited since the alleged incident; spokespersons for both have neither confirmed nor denied it.'\",\n        \"Extract this sentence as it directly answers whether they are still together, though noting it's based on media reports rather than confirmed statements\"\n    ],\n    \"pseudocode\": \"def find_relationship_status(text, question):\\n    sentences = split_into_sentences(text)\\n    relevant_sentences = []\\n    for sentence in sentences:\\n        if contains_relationship_keywords(sentence) and contains_post_incident_info(sentence):\\n            relevant_sentences.append(sentence)\\n    return relevant_sentences\\n\\ndef contains_relationship_keywords(sentence):\\n    keywords = ['reunited', 'together', 'couple', 'relationship']\\n    for keyword in keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef contains_post_incident_info(sentence):\\n    temporal_markers = ['since', 'after', 'following']\\n    for marker in temporal_markers:\\n        if marker in sentence and 'incident' in sentence:\\n            return True\\n    return False\",\n    \"loop_count\": 3,\n    \"branch_count\": 4,\n    \"variable_count\": 7\n}"}
{"qid": 72, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that mammals are defined as a class of animals characterized by the presence of mammary glands, hair or fur, and three middle ear bones\",\n        \"Recognize that the taxonomic classification places all mammals within the subphylum Vertebrata, meaning they possess a vertebral column (backbone)\",\n        \"Since membership in the class Mammalia requires being part of Vertebrata, we can definitively conclude that all mammals must be vertebrates\"\n    ],\n    \"pseudocode\": \"def are_all_mammals_vertebrates():\\n    mammal_characteristics = ['mammary_glands', 'hair_or_fur', 'three_ear_bones']\\n    vertebrate_requirement = 'vertebral_column'\\n    \\n    if vertebrate_requirement in taxonomic_requirements_for_mammalia:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 73, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that prehistoric animals contained organic matter rich in lipids and proteins that underwent anaerobic decomposition\",\n        \"Identify that when marine organisms died and settled on ocean floors, they were buried under sediment layers creating high pressure and temperature conditions\",\n        \"Apply the principle of thermal maturation where organic matter transforms into hydrocarbons over millions of years\",\n        \"Determine that liquid hydrocarbons (oil) form from animal remains while coal typically forms from plant matter\"\n    ],\n    \"pseudocode\": \"def identify_fossil_fuel_from_animals():\\n    source_material = \\\"prehistoric_animals\\\"\\n    decomposition_type = \\\"anaerobic\\\"\\n    burial_environment = \\\"marine_sediments\\\"\\n    \\n    if source_material == \\\"prehistoric_animals\\\":\\n        organic_content = \\\"lipids_and_proteins\\\"\\n        if decomposition_type == \\\"anaerobic\\\" and burial_environment == \\\"marine_sediments\\\":\\n            temperature = \\\"high\\\"\\n            pressure = \\\"high\\\"\\n            time_period = \\\"millions_of_years\\\"\\n            \\n            if organic_content == \\\"lipids_and_proteins\\\" and temperature == \\\"high\\\" and pressure == \\\"high\\\":\\n                fossil_fuel_type = \\\"oil\\\"\\n            else:\\n                fossil_fuel_type = \\\"other\\\"\\n        else:\\n            fossil_fuel_type = \\\"none\\\"\\n    elif source_material == \\\"prehistoric_plants\\\":\\n        fossil_fuel_type = \\\"coal\\\"\\n    else:\\n        fossil_fuel_type = \\\"none\\\"\\n    \\n    return fossil_fuel_type\",\n    \"loop_count\": 0,\n    \"branch_count\": 6,\n    \"variable_count\": 8\n}"}
{"qid": 74, "response": "{\n    \"reasoning_steps\": [\n        \"Apply put-call parity for currency options: C - P = S\u2080e^(-rf*T) - Ke^(-rd*T), where S\u2080 is spot rate, K is strike, rf is foreign rate, rd is domestic rate\",\n        \"Calculate the price of the corresponding dollar-denominated call option on yen using the given put price and put-call parity\",\n        \"Use the symmetry relationship for currency options: a yen-denominated put on dollars with strike K_yen is equivalent to a dollar-denominated call on yen with strike 1/K_yen\",\n        \"Convert the dollar price to yen by multiplying by the reciprocal of the current exchange rate (1/0.011 = 90.909 \u00a5/$)\"\n    ],\n    \"pseudocode\": \"def calculate_yen_put_price():\\n    S0_dollar_per_yen = 0.011\\n    K_dollar_per_yen = 0.008\\n    P_dollar = 0.0005\\n    r_dollar = 0.03\\n    r_yen = 0.015\\n    T = 4\\n    K_yen_per_dollar = 125\\n    \\n    exp_neg_r_yen_T = exp(-r_yen * T)\\n    exp_neg_r_dollar_T = exp(-r_dollar * T)\\n    \\n    C_dollar = P_dollar + S0_dollar_per_yen * exp_neg_r_yen_T - K_dollar_per_yen * exp_neg_r_dollar_T\\n    \\n    equivalent_strike = 1 / K_yen_per_dollar\\n    \\n    if abs(equivalent_strike - K_dollar_per_yen) < 0.0001:\\n        price_in_dollars = C_dollar\\n    else:\\n        price_in_dollars = C_dollar\\n    \\n    S0_yen_per_dollar = 1 / S0_dollar_per_yen\\n    price_in_yen = price_in_dollars * S0_yen_per_dollar\\n    \\n    return price_in_yen\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 13\n}"}
{"qid": 75, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that hair and fingernail growth requires active cellular metabolism and blood supply, which cease at death\",\n        \"Identify the common misconception about post-mortem growth, which actually results from skin dehydration and retraction\",\n        \"Determine that the correct biological fact is that no growth occurs after death, only the appearance of growth due to tissue changes\"\n    ],\n    \"pseudocode\": \"def what_happens_to_hair_nails_after_death():\\n    metabolism_active = False\\n    blood_supply = False\\n    \\n    if not metabolism_active and not blood_supply:\\n        actual_growth = False\\n    \\n    skin_dehydration = True\\n    \\n    if skin_dehydration:\\n        appearance_of_growth = True\\n    else:\\n        appearance_of_growth = False\\n    \\n    return actual_growth\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 76, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the Fisher Space Pen was developed independently by Paul C. Fisher of the Fisher Pen Company, not by NASA\",\n        \"Recall that NASA initially used pencils in space but later purchased already-developed Fisher Space Pens at a standard commercial price\",\n        \"Determine that NASA's expenditure was limited to purchasing existing pens, not funding their development\"\n    ],\n    \"pseudocode\": \"def calculate_nasa_pen_development_cost():\\n    fisher_developed_independently = True\\n    nasa_funded_development = False\\n    \\n    if fisher_developed_independently and not nasa_funded_development:\\n        development_cost = 0\\n        purchase_cost = \\\"standard commercial price\\\"\\n        return development_cost\\n    \\n    return development_cost\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 77, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the parabola y = x\u00b2 has focus at (0, 1/4) and directrix at y = -1/4\",\n        \"Use the property that for any point on a parabola, the distance to the focus equals the distance to the directrix\",\n        \"Apply Vieta's formulas to find the fourth intersection point, using the fact that the sum of roots of the fourth-degree polynomial equals zero\",\n        \"Calculate the distance from each point (x, x\u00b2) to the directrix y = -1/4 as x\u00b2 - (-1/4) = x\u00b2 + 1/4\",\n        \"Sum the four distances to get the total\"\n    ],\n    \"pseudocode\": \"def find_sum_of_distances():\\n    x1 = -28\\n    y1 = 784\\n    x2 = -2\\n    y2 = 4\\n    x3 = 13\\n    y3 = 169\\n    x4 = -(x1 + x2 + x3)\\n    y4 = x4 * x4\\n    directrix_y = -0.25\\n    dist1 = y1 - directrix_y\\n    dist2 = y2 - directrix_y\\n    dist3 = y3 - directrix_y\\n    dist4 = y4 - directrix_y\\n    total_distance = dist1 + dist2 + dist3 + dist4\\n    return total_distance\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 15\n}"}
{"qid": 78, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that a metric space is complete if every Cauchy sequence converges to an element in the space.\",\n        \"Consider the sequence of polynomials p_n(x) = x^n on [0,1], which converges pointwise to the function f(x) = 0 for x in [0,1) and f(1) = 1.\",\n        \"Calculate the L1 distance between consecutive terms: \u222b\u2080\u00b9|x^(n+1) - x^n|dx = \u222b\u2080\u00b9 x^n(1-x)dx = 1/(n+1) - 1/(n+2) = 1/((n+1)(n+2)).\",\n        \"Since \u2211(1/((n+1)(n+2))) converges, the sequence {p_n} is Cauchy in the L1 metric.\",\n        \"The pointwise limit function f is not continuous at x=1, hence not a polynomial, so the Cauchy sequence does not converge to an element in P[0,1].\"\n    ],\n    \"pseudocode\": \"def is_complete_polynomial_space():\\n    p_n = lambda n, x: x**n\\n    limit_function = lambda x: 0 if x < 1 else 1\\n    \\n    n = 1\\n    while n < 100:\\n        distance = 1 / ((n + 1) * (n + 2))\\n        n = n + 1\\n    \\n    is_polynomial = False\\n    if limit_function is continuous:\\n        is_polynomial = True\\n    \\n    if is_polynomial:\\n        return 1\\n    else:\\n        return 0\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 79, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that the Sun is classified as a G-type main-sequence star with a medium size compared to other stars in the universe.\",\n        \"Recognize that the Sun is located in the Orion Arm of the Milky Way Galaxy, approximately 26,000 light-years from the galactic center.\",\n        \"Understand that the Milky Way Galaxy has a diameter of about 100,000 light-years, placing the Sun in the outer regions rather than at the center.\",\n        \"Compare each given statement against these astronomical facts to identify which correctly describes the Sun's size and position.\"\n    ],\n    \"pseudocode\": \"def evaluate_sun_statements():\\n    sun_size = \\\"medium\\\"\\n    sun_distance_from_center = 26000\\n    galaxy_radius = 50000\\n    \\n    if sun_distance_from_center > galaxy_radius * 0.4:\\n        sun_position = \\\"near_edge\\\"\\n    else:\\n        sun_position = \\\"center\\\"\\n    \\n    if sun_size == \\\"medium\\\" and sun_position == \\\"near_edge\\\":\\n        correct_statement = \\\"C\\\"\\n    elif sun_size == \\\"very_large\\\":\\n        correct_statement = \\\"A\\\"\\n    elif sun_position == \\\"center\\\":\\n        correct_statement = \\\"B\\\"\\n    else:\\n        correct_statement = \\\"D\\\"\\n    \\n    return correct_statement\",\n    \"loop_count\": 0,\n    \"branch_count\": 6,\n    \"variable_count\": 5\n}"}
{"qid": 80, "response": "{\n    \"reasoning_steps\": [\n        \"Calculate the terminal velocity of a penny using the drag equation: v_terminal = sqrt(2mg/\u03c1AC_d), where m is mass, g is gravitational acceleration, \u03c1 is air density, A is cross-sectional area, and C_d is drag coefficient\",\n        \"For a penny with mass ~2.5g, area ~2.85cm\u00b2, and C_d ~1.17 (flat disk), terminal velocity is approximately 30-50 mph (13-22 m/s)\",\n        \"Calculate the kinetic energy at impact using KE = 0.5mv\u00b2, which yields approximately 0.2-0.6 joules\",\n        \"Compare this energy to injury thresholds: human skin penetration requires ~15-20 J/cm\u00b2, while the penny impact delivers only ~0.07-0.21 J/cm\u00b2\",\n        \"Determine that the impact force is insufficient to cause serious injury, resulting in only a light sting or minor discomfort\"\n    ],\n    \"pseudocode\": \"def calculate_penny_impact():\\n    mass = 0.0025\\n    gravity = 9.81\\n    air_density = 1.225\\n    area = 0.000285\\n    drag_coefficient = 1.17\\n    \\n    terminal_velocity = sqrt((2 * mass * gravity) / (air_density * area * drag_coefficient))\\n    \\n    kinetic_energy = 0.5 * mass * terminal_velocity * terminal_velocity\\n    \\n    energy_per_area = kinetic_energy / area\\n    \\n    skin_penetration_threshold = 15\\n    \\n    if energy_per_area < skin_penetration_threshold:\\n        impact_severity = \\\"light impact\\\"\\n    else:\\n        impact_severity = \\\"serious injury\\\"\\n    \\n    return impact_severity\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 10\n}"}
{"qid": 81, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about a 'hit drama' the subject stars in\",\n        \"Locate the reference to Kiefer Sutherland being described as a '24' star in the opening sentence\",\n        \"Extract '24' as the drama series name, noting it appears in quotation marks indicating it's a show title\"\n    ],\n    \"pseudocode\": \"def find_drama_title(text, question):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_star_reference(sentence):\\n            drama_title = extract_quoted_title(sentence)\\n            if drama_title:\\n                return [drama_title]\\n    return []\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 82, "response": "{\n    \"reasoning_steps\": [\n        \"Recall the sum-to-product identity for sine: sin A + sin B = 2 sin((A+B)/2) cos((A-B)/2)\",\n        \"Identify A = 4x and B = 6x in the given expression\",\n        \"Calculate (A+B)/2 = (4x+6x)/2 = 10x/2 = 5x\",\n        \"Calculate (A-B)/2 = (4x-6x)/2 = -2x/2 = -x\",\n        \"Apply the identity, noting that cos(-x) = cos(x) due to the even property of cosine\"\n    ],\n    \"pseudocode\": \"def express_sum_as_product(expression):\\n    A = 4\\n    B = 6\\n    sum_half = (A + B) / 2\\n    diff_half = (A - B) / 2\\n    coefficient = 2\\n    angle1 = sum_half\\n    angle2 = abs(diff_half)\\n    return coefficient, angle1, angle2\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 7\n}"}
{"qid": 83, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that this is a logical tautology question where 'cat' is a defined category\",\n        \"Apply the law of identity: for any entity X, if X is a cat, then X is a cat (A = A)\",\n        \"Check if any entity classified as 'cat' could simultaneously not be a 'cat', which would violate the law of non-contradiction\",\n        \"Conclude that by definition, anything that is a cat must be a cat, making the answer definitively 'No'\"\n    ],\n    \"pseudocode\": \"def are_there_cats_that_arent_cats():\\n    cat_definition = True\\n    law_of_identity = True\\n    \\n    if cat_definition and law_of_identity:\\n        all_cats_are_cats = True\\n    else:\\n        all_cats_are_cats = False\\n    \\n    if all_cats_are_cats:\\n        answer = False\\n    else:\\n        answer = True\\n    \\n    return answer\",\n    \"pred_loop_count\": 0,\n    \"pred_branch_count\": 4,\n    \"pred_variable_count\": 5\n}"}
{"qid": 84, "response": "{\n    \"reasoning_steps\": [\n        \"Convert the semicircle region to polar coordinates centered at C(1/2, 0) by setting x = 1/2 + r cos(\u03b8) and y = r sin(\u03b8)\",\n        \"Determine the bounds: radius r ranges from 0 to 1/2 (the semicircle radius), and angle \u03b8 ranges from 0 to \u03c0 for the upper semicircle\",\n        \"Apply the Jacobian transformation |J| = r for polar coordinates to convert dxdy to r dr d\u03b8\",\n        \"Substitute y = r sin(\u03b8) into the integrand and evaluate the double integral \u222b\u2080^\u03c0 \u222b\u2080^(1/2) r\u00b2 sin(\u03b8) dr d\u03b8\",\n        \"Integrate with respect to r first to get \u222b\u2080^\u03c0 (1/8) sin(\u03b8) d\u03b8, then integrate with respect to \u03b8 to obtain the final result\"\n    ],\n    \"pseudocode\": \"def calculate_double_integral():\\n    center_x = 0.5\\n    center_y = 0\\n    radius = 0.5\\n    \\n    def integrand(r, theta):\\n        y = r * sin(theta)\\n        jacobian = r\\n        return y * jacobian\\n    \\n    inner_integral = 0\\n    theta = 0\\n    while theta <= pi:\\n        r = 0\\n        r_integral = 0\\n        while r <= radius:\\n            r_integral = r_integral + integrand(r, theta) * dr\\n            r = r + dr\\n        inner_integral = inner_integral + r_integral * dtheta\\n        theta = theta + dtheta\\n    \\n    result = inner_integral\\n    return result\",\n    \"loop_count\": 2,\n    \"branch_count\": 0,\n    \"variable_count\": 11\n}"}
{"qid": 85, "response": "{\n    \"reasoning_steps\": [\n        \"Establish that the 9/11 Commission Report identified Al-Qaeda as the perpetrator of the September 11, 2001 attacks\",\n        \"Note that Osama bin Laden was the leader of Al-Qaeda and claimed responsibility for orchestrating the attacks\",\n        \"Recognize that 15 of the 19 hijackers were Saudi nationals, though the Saudi government as an institution was not found to have funded the attacks\",\n        \"Acknowledge that while conspiracy theories exist, credible evidence from multiple investigations points to Al-Qaeda as the responsible party\"\n    ],\n    \"pseudocode\": \"def identify_911_perpetrator():\\n    perpetrator = \\\"Al-Qaeda\\\"\\n    leader = \\\"Osama bin Laden\\\"\\n    hijacker_nationalities = {\\\"Saudi Arabia\\\": 15, \\\"UAE\\\": 2, \\\"Egypt\\\": 1, \\\"Lebanon\\\": 1}\\n    \\n    if perpetrator == \\\"Al-Qaeda\\\":\\n        responsible_party = perpetrator\\n        responsible_leader = leader\\n    \\n    saudi_hijacker_count = hijacker_nationalities[\\\"Saudi Arabia\\\"]\\n    \\n    if saudi_hijacker_count > 10:\\n        majority_nationality = \\\"Saudi Arabia\\\"\\n    \\n    official_finding = \\\"Al-Qaeda caused the 9/11 attacks\\\"\\n    \\n    return official_finding\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 7\n}"}
{"qid": 86, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks what Saddam Hussein said, requiring extraction of his direct statements from the FBI interview documents\",\n        \"Scan through the text to locate Hussein's quoted statements and paraphrased beliefs from the FBI interviews conducted in 2004\",\n        \"Extract the key statement that Hussein believed Iran was a greater threat to Iraq than the United States, which appears in the first paragraph\",\n        \"Verify this was indeed something Hussein communicated to FBI interrogator during the interviews at Baghdad International Airport\"\n    ],\n    \"pseudocode\": \"def extract_hussein_statements(text):\\n    statements = []\\n    paragraphs = split_into_paragraphs(text)\\n    for paragraph in paragraphs:\\n        if contains_hussein_quote_or_belief(paragraph):\\n            statement = extract_statement(paragraph)\\n            statements.append(statement)\\n    return statements\\n\\ndef contains_hussein_quote_or_belief(paragraph):\\n    keywords = ['Hussein said', 'Hussein told', 'Hussein believed', 'he believed', 'he said']\\n    for keyword in keywords:\\n        if keyword in paragraph:\\n            return True\\n    return False\\n\\ndef extract_statement(paragraph):\\n    if 'believed Iran was a greater threat' in paragraph:\\n        return 'he believed Iran was a greater threat to Iraq than the United States'\\n    return extract_other_statements(paragraph)\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 6\n}"}
{"qid": 87, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that soil compaction reduces pore space between soil particles, limiting air and water movement through the soil.\",\n        \"Understand that plant roots require oxygen from soil pores for respiration and need to penetrate soil to grow and access nutrients.\",\n        \"Determine that compacted soil creates a physical barrier preventing root penetration and reduces oxygen availability, inhibiting plant growth.\"\n    ],\n    \"pseudocode\": \"def evaluate_soil_compaction_effects():\\n    soil_porosity = calculate_pore_space()\\n    root_penetration_resistance = measure_soil_density()\\n    oxygen_availability = assess_air_content()\\n    \\n    if soil_porosity < minimum_threshold:\\n        growth_possible = False\\n    elif root_penetration_resistance > maximum_threshold:\\n        growth_possible = False\\n    elif oxygen_availability < critical_level:\\n        growth_possible = False\\n    else:\\n        growth_possible = True\\n    \\n    return growth_possible\",\n    \"loop_count\": 0,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 88, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that the apparent brightness of a star depends on its luminosity (total energy output) and distance from the observer.\",\n        \"Since both stars are at the same distance from Earth, the difference in apparent brightness must be due to different luminosities.\",\n        \"A star's luminosity is primarily determined by its size and temperature, with larger stars generally having greater surface area and thus higher total energy output.\",\n        \"Since Star X appears brighter than Star Y at the same distance, Star X must have higher luminosity, which most likely means Star X is larger than Star Y.\"\n    ],\n    \"pseudocode\": \"def compare_star_brightness(star_x_brightness, star_y_brightness, same_distance):\\n    if same_distance:\\n        if star_x_brightness > star_y_brightness:\\n            luminosity_x = star_x_brightness\\n            luminosity_y = star_y_brightness\\n            if luminosity_x > luminosity_y:\\n                return \\\"Star X is larger than star Y\\\"\\n    return \\\"Cannot determine\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 89, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that improved global shipping allows foods to be transported from distant regions where they are grown to markets worldwide.\",\n        \"Apply the economic principle that reduced transportation barriers increase market access and product variety.\",\n        \"Consider that foods with different growing seasons and climate requirements can now reach consumers year-round from various global sources.\",\n        \"Conclude that expanded shipping networks directly correlate with greater diversity of available food products in local markets.\"\n    ],\n    \"pseudocode\": \"def analyze_shipping_impact():\\n    shipping_capability = 'improved'\\n    \\n    if shipping_capability == 'improved':\\n        transport_distance = 'global'\\n        market_access = 'expanded'\\n        \\n        if market_access == 'expanded':\\n            food_sources = 'multiple_regions'\\n            seasonal_availability = 'year_round'\\n            product_variety = 'increased'\\n    \\n    return product_variety\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 90, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that the International Astronomical Union (IAU) reclassified Pluto as a dwarf planet in 2006, reducing the count from nine to eight planets\",\n        \"List the eight recognized planets in order from the Sun: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune\",\n        \"Return the count of eight planets as the current scientific consensus\"\n    ],\n    \"pseudocode\": \"def count_planets_in_solar_system():\\n    planets = [\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\\n    planet_count = 8\\n    return planet_count\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 2\n}"}
{"qid": 91, "response": "{\n    \"reasoning_steps\": [\n        \"For a rational function to have domain of all real numbers, its denominator must never equal zero for any real x.\",\n        \"The denominator -5x\u00b2 + 2x + k = 0 is a quadratic equation, which has no real solutions when its discriminant is negative.\",\n        \"For a quadratic ax\u00b2 + bx + c = 0, the discriminant is b\u00b2 - 4ac. Here a = -5, b = 2, c = k.\",\n        \"Calculate the discriminant: 2\u00b2 - 4(-5)(k) = 4 + 20k.\",\n        \"For no real solutions, we need 4 + 20k < 0, which gives k < -1/5.\"\n    ],\n    \"pseudocode\": \"def find_k_values():\\n    a = -5\\n    b = 2\\n    discriminant_coefficient = -4 * a\\n    discriminant_constant = b * b\\n    k_threshold = -discriminant_constant / discriminant_coefficient\\n    return k_threshold\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 5\n}"}
{"qid": 92, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that human speech requires complex vocal anatomy including a descended larynx, precise tongue control, and specific brain regions like Broca's and Wernicke's areas\",\n        \"Acknowledge that while some animals like parrots can mimic human sounds, they lack the cognitive-linguistic capacity for true language production with grammar and meaning\",\n        \"Determine that no animal possesses both the anatomical structures and neurological capabilities required for human-level speech production and comprehension\"\n    ],\n    \"pseudocode\": \"def can_animals_speak_like_humans():\\n    human_speech_requirements = ['descended_larynx', 'precise_vocal_control', 'language_brain_regions']\\n    animal_capabilities = []\\n    \\n    for requirement in human_speech_requirements:\\n        animal_has_capability = False\\n        if not animal_has_capability:\\n            return False\\n    \\n    return True\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 93, "response": "{\n    \"reasoning_steps\": [\n        \"Apply Vieta's formulas to extract a + b + c = 9, ab + ac + bc = 11, and abc = 1 from the polynomial x\u00b3 - 9x\u00b2 + 11x - 1 = 0.\",\n        \"Express s\u00b2 = (\u221aa + \u221ab + \u221ac)\u00b2 = a + b + c + 2(\u221aab + \u221aac + \u221abc) = 9 + 2(\u221aab + \u221aac + \u221abc).\",\n        \"Square the expression s\u00b2 - 9 = 2(\u221aab + \u221aac + \u221abc) to obtain (s\u00b2 - 9)\u00b2 = 4[ab + ac + bc + 2(\u221a(ab)\u221a(ac) + \u221a(ab)\u221a(bc) + \u221a(ac)\u221a(bc))].\",\n        \"Factor out \u221aabc from the cross terms: 2(\u221a(ab)\u221a(ac) + \u221a(ab)\u221a(bc) + \u221a(ac)\u221a(bc)) = 2\u221aabc(\u221aa + \u221ab + \u221ac) = 2(1)(s) = 2s.\",\n        \"Substitute the known values to get s\u2074 - 18s\u00b2 + 81 = 4(11 + 2s) = 44 + 8s.\",\n        \"Rearrange to find s\u2074 - 18s\u00b2 - 8s = -37.\"\n    ],\n    \"pseudocode\": \"def compute_expression():\\n    a_plus_b_plus_c = 9\\n    ab_plus_ac_plus_bc = 11\\n    abc = 1\\n    \\n    s_squared_minus_9_squared = 4 * ab_plus_ac_plus_bc + 8 * 1\\n    \\n    result = s_squared_minus_9_squared - 81 + 8 * 1\\n    \\n    final_value = result - 8 * 1\\n    \\n    return final_value\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 6\n}"}
{"qid": 94, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of the plane's manufacturer or origin, focusing on descriptors like 'made', 'manufactured', or country of origin.\",\n        \"Identify that the text explicitly states 'Russian-made plane' when describing the Caspian Airlines aircraft.\",\n        \"Confirm this information by noting the plane model is specified as 'Tupolev Tu-154M', which is a Russian aircraft manufacturer.\",\n        \"Extract and return the manufacturing origin as 'Russian-made' based on the direct textual evidence.\"\n    ],\n    \"pseudocode\": \"def find_plane_origin(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        words = split_into_words(sentence)\\n        for i in range(len(words) - 1):\\n            if words[i] == \\\"Russian-made\\\" and words[i+1] == \\\"plane\\\":\\n                return \\\"Russian-made\\\"\\n            if words[i] == \\\"Russian-made\\\" and words[i+1] == \\\"Tupolev\\\":\\n                return \\\"Russian-made\\\"\\n    return None\",\n    \"loop_count\": 2,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 95, "response": "{\n    \"reasoning_steps\": [\n        \"Apply Hoeffding's inequality for bounded independent random variables, which states that for independent random variables X_i in [a_i, b_i], P(|mean(X) - E[mean(X)]| \u2265 t) \u2264 2*exp(-2*n*t\u00b2/\u03a3(b_i-a_i)\u00b2)\",\n        \"Calculate the parameters: each X_i is in [10, 11] so b_i - a_i = 1, the mean of each X_i is 10.5, so E[mean(X)] = 10.5\",\n        \"Determine the deviation threshold: we want P(mean(X) < 10.2 or mean(X) > 10.8), which is P(|mean(X) - 10.5| \u2265 0.3), so t = 0.3\",\n        \"Substitute into Hoeffding's inequality: with n = 10, t = 0.3, and \u03a3(b_i-a_i)\u00b2 = 10*1\u00b2 = 10, we get P \u2264 2*exp(-2*10*0.3\u00b2/10) = 2*exp(-1.8)\",\n        \"Compute the numerical value: 2*exp(-1.8) \u2248 2*0.16529888 \u2248 0.3305\"\n    ],\n    \"pseudocode\": \"def hoeffding_bound(n, ranges, means, lower_threshold, upper_threshold):\\n    expected_mean = sum(means) / n\\n    t = min(expected_mean - lower_threshold, upper_threshold - expected_mean)\\n    sum_range_squares = 0\\n    for i in range(n):\\n        range_i = ranges[i][1] - ranges[i][0]\\n        sum_range_squares = sum_range_squares + range_i * range_i\\n    exponent = -2 * n * t * t / sum_range_squares\\n    bound = 2 * exp(exponent)\\n    return bound\",\n    \"loop_count\": 1,\n    \"branch_count\": 0,\n    \"variable_count\": 8\n}"}
{"qid": 96, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks specifically about who trains women to find suicide bombers\",\n        \"Locate the relevant information in the text that states 'the U.S. Army has created a solution with \\\"Daughters of Iraq,\\\" a program that trains Iraqi women to find female suicide bombers'\",\n        \"Extract the program name 'Daughters of Iraq' as the entity that trains women for this purpose\"\n    ],\n    \"pseudocode\": \"def find_trainer_of_women(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_keywords(sentence, ['trains', 'women', 'suicide bombers']):\\n            program_name = extract_program_name(sentence)\\n            return program_name\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 97, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the key event described in the text: an ambush on August 18 that resulted in casualties among French troops in Afghanistan's Sarobi District.\",\n        \"Extract the specific casualty information: the text states '10 French troops' were killed and '21' were injured in this ambush.\",\n        \"Verify this information is consistent throughout the text: the opening sentence mentions '10 French soldiers killed last month' and later confirms it was 'the French army's single highest death toll in 25 years'.\",\n        \"Note that the Taliban fighters in the photos are wearing the uniforms of these deceased French soldiers, which sparked the controversy.\"\n    ],\n    \"pseudocode\": \"def extract_casualties(text):\\n    casualties = []\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_death_keywords(sentence):\\n            numbers = extract_numbers(sentence)\\n            entities = extract_entities(sentence)\\n            for i in range(len(numbers)):\\n                if is_casualty_context(numbers[i], entities, sentence):\\n                    casualty_info = format_casualty(numbers[i], entities)\\n                    casualties.append(casualty_info)\\n    return casualties\",\n    \"loop_count\": 2,\n    \"branch_count\": 2,\n    \"variable_count\": 7\n}"}
{"qid": 98, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that light exhibits wave-particle duality, a fundamental principle in quantum mechanics where electromagnetic radiation displays both wave and particle properties\",\n        \"Check if the input describes light as exclusively a particle or exclusively a wave, which would be incorrect according to modern physics\",\n        \"Verify if the input acknowledges both wave and particle properties, or states that light is neither exclusively one nor the other\",\n        \"Return true if the statement correctly represents wave-particle duality, false if it claims light is only a particle or only a wave\"\n    ],\n    \"pseudocode\": \"def is_correct_light_description(statement):\\n    wave_only_terms = ['is a wave', 'only wave', 'just a wave']\\n    particle_only_terms = ['is a particle', 'only particle', 'just a particle']\\n    duality_terms = ['both', 'wave-particle', 'exhibits properties of both', 'neither exclusively']\\n    \\n    statement_lower = statement.lower()\\n    \\n    for term in wave_only_terms:\\n        if term in statement_lower and 'both' not in statement_lower:\\n            return False\\n    \\n    for term in particle_only_terms:\\n        if term in statement_lower and 'both' not in statement_lower:\\n            return False\\n    \\n    for term in duality_terms:\\n        if term in statement_lower:\\n            return True\\n    \\n    return False\",\n    \"loop_count\": 3,\n    \"branch_count\": 6,\n    \"variable_count\": 5\n}"}
{"qid": 99, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that pricking a finger on a spindle causes a minor puncture wound to the skin tissue\",\n        \"Determine that minor puncture wounds typically result in light bleeding due to capillary damage\",\n        \"Assess that nerve endings in the finger will transmit pain signals, causing a stinging sensation\",\n        \"Conclude that the overall injury from a spindle prick is minor and will heal naturally\"\n    ],\n    \"pseudocode\": \"def assess_spindle_prick_injury(finger_prick_event):\\n    injury_type = \\\"minor_puncture_wound\\\"\\n    bleeding_level = \\\"light\\\"\\n    pain_response = \\\"stinging_sensation\\\"\\n    \\n    if finger_prick_event == \\\"spindle_prick\\\":\\n        injury_severity = \\\"light_injury\\\"\\n        symptoms = [bleeding_level, pain_response]\\n        healing_time = \\\"minimal\\\"\\n        \\n        return injury_severity, symptoms\\n    \\n    return None\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 7\n}"}
{"qid": 100, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the first term a = 1/4 and common ratio r = 1/2 of the geometric sequence.\",\n        \"Apply the geometric series sum formula: S_n = a(1 - r^n)/(1 - r) for the sum of first n terms.\",\n        \"Substitute the known values into the formula: 63/128 = (1/4)(1 - (1/2)^n)/(1 - 1/2).\",\n        \"Simplify the equation algebraically to get 63/128 = (2^n - 1)/(2^(n+1)).\",\n        \"Express 63/128 as (2^6 - 1)/(2^7) since 63 = 2^6 - 1 and 128 = 2^7.\",\n        \"Compare the two expressions to conclude that n = 6.\"\n    ],\n    \"pseudocode\": \"def find_n_terms(target_sum):\\n    a = 1/4\\n    r = 1/2\\n    numerator = 63\\n    denominator = 128\\n    n = 1\\n    while n <= 20:\\n        sum_n = a * (1 - r**n) / (1 - r)\\n        if abs(sum_n - target_sum) < 0.0001:\\n            return n\\n        n = n + 1\\n    return -1\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 7\n}"}
{"qid": 101, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that elements in the same group (vertical column) of the periodic table have the same number of valence electrons in their outermost shell\",\n        \"Recognize that valence electrons determine how an element bonds with other elements, which directly affects its chemical reactivity\",\n        \"Note that elements in the same group have different atomic masses, different numbers of protons (atomic numbers), and different atomic sizes as you move down the group\",\n        \"Conclude that chemical reactivity is the most similar property for elements in the same group because they share the same valence electron configuration\"\n    ],\n    \"pseudocode\": \"def find_most_similar_property(group_elements):\\n    valence_electrons = get_valence_electrons(group_elements[0])\\n    for element in group_elements:\\n        if get_valence_electrons(element) != valence_electrons:\\n            return False\\n    return True\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 102, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that reindeer are terrestrial mammals belonging to the species Rangifer tarandus, which lack anatomical structures for flight such as wings or hollow bones\",\n        \"Apply the biological principle that mammalian flight requires specific adaptations like those found in bats (modified forelimbs as wings) which reindeer do not possess\",\n        \"Conclude based on zoological facts that reindeer locomotion is limited to walking and running on land\"\n    ],\n    \"pseudocode\": \"def can_reindeer_fly():\\n    has_wings = False\\n    has_hollow_bones = False\\n    has_flight_muscles = False\\n    \\n    if has_wings and has_hollow_bones and has_flight_muscles:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 103, "response": "{\n    \"reasoning_steps\": [\n        \"Factor n^2 + 3n + 2 as (n+1)(n+2), which represents the product of two consecutive integers starting from n+1\",\n        \"For (n+1)(n+2) to be divisible by 6, it must be divisible by both 2 and 3\",\n        \"Since (n+1) and (n+2) are consecutive integers, one of them is always even, ensuring divisibility by 2\",\n        \"For divisibility by 3, at least one of the consecutive integers (n+1) or (n+2) must be divisible by 3\",\n        \"Among any three consecutive integers, exactly one is divisible by 3, so we need either n+1 \u2261 0 (mod 3) or n+2 \u2261 0 (mod 3)\",\n        \"This occurs when n \u2261 2 (mod 3) or n \u2261 1 (mod 3), which means n is not divisible by 3\",\n        \"Count integers from 1 to 25 that are not divisible by 3\"\n    ],\n    \"pseudocode\": \"def count_valid_n():\\n    count = 0\\n    for n in range(1, 26):\\n        if n % 3 != 0:\\n            count = count + 1\\n    return count\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 104, "response": "{\n    \"reasoning_steps\": [\n        \"Since f(f(z)) = z, the function f is an involution on the upper half plane, meaning f is its own inverse.\",\n        \"Given f'(z) = 1/z\u00b2, integrate to find f(z) = -1/z + C for some constant C.\",\n        \"Apply the involution property f(f(z)) = z by substituting f(z) = -1/z + C into itself to determine C.\",\n        \"Compute f(f(z)) = f(-1/z + C) = -1/(-1/z + C) + C and set this equal to z to solve for C.\",\n        \"Simplify the equation -1/(-1/z + C) + C = z by finding a common denominator and solving the resulting quadratic equation in C.\",\n        \"From the quadratic C\u00b2 = 1, we get C = \u00b11, but verify which value preserves the upper half plane mapping.\",\n        \"With C = 1, check that f(z) = -1/z + 1 = (z-1)/z maps the upper half plane to itself by examining the imaginary part.\",\n        \"Calculate f(2) = (2-1)/2 = 1/2 = 0.5, but since we need -0.5, we must have C = -1 instead.\",\n        \"Verify that with C = -1, f(z) = -1/z - 1 = -(z+1)/z gives f(2) = -(2+1)/2 = -3/2, which is incorrect.\",\n        \"Re-examine the integration: since f'(z) = 1/z\u00b2, we have f(z) = -1/z + C, and with the involution property, solve C\u00b2 = 1 more carefully.\",\n        \"For f(z) = -1/z + 1, compute f(2) = -1/2 + 1 = 1/2, but the answer suggests f(2) = -0.5, so check f(z) = -1/z - 1.\",\n        \"With f(z) = -1/z - 1, calculate f(2) = -1/2 - 1 = -3/2, still not matching -0.5.\",\n        \"Reconsider the problem: if f(z) = 1/z (without the negative sign), then f'(z) = -1/z\u00b2, not 1/z\u00b2 as given.\",\n        \"The correct antiderivative of 1/z\u00b2 is -1/z, so f(z) = -1/z + C, and the involution condition gives C = 0, thus f(z) = -1/z.\",\n        \"Calculate f(2) = -1/2 = -0.5, which matches the expected answer.\"\n    ],\n    \"pseudocode\": \"def find_f_at_2():\\n    z = 2\\n    f_z = -1 / z\\n    return f_z\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 2\n}"}
{"qid": 105, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the person who claims to have made up the story according to the text\",\n        \"Locate the statement about why she fabricated the story, specifically mentioning getting back at her boyfriend\",\n        \"Extract the name of the person who is recanting her story as stated by her attorney Byron Potts\"\n    ],\n    \"pseudocode\": \"def find_who_made_up_story(text):\\n    person_recanting = None\\n    reason_for_fabrication = None\\n    \\n    if \\\"She is recanting her entire story\\\" in text:\\n        person_recanting = \\\"Megan Williams\\\"\\n    \\n    if \\\"She wanted to get back at her boyfriend\\\" in text:\\n        reason_for_fabrication = \\\"to hurt ex-boyfriend\\\"\\n    \\n    if person_recanting and reason_for_fabrication:\\n        return person_recanting\\n    \\n    return None\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 3\n}"}
{"qid": 106, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that by Gauss's Lemma, a is a quadratic residue modulo p if and only if the number of least positive residues of a, 2a, 3a, ..., ((p-1)/2)a that are greater than p/2 is even\",\n        \"For p = 19 and a = 10, compute the products 10\u00b71, 10\u00b72, ..., 10\u00b79 modulo 19\",\n        \"Reduce each product modulo 19 to get the least positive residues\",\n        \"Count how many of these residues are greater than 19/2 = 9.5\",\n        \"If the count is even, then 10 is a quadratic residue; if odd, then 10 is not a quadratic residue\"\n    ],\n    \"pseudocode\": \"def is_quadratic_residue_gauss(a, p):\\n    half_p = (p - 1) // 2\\n    count = 0\\n    \\n    for k in range(1, half_p + 1):\\n        product = (a * k) % p\\n        if product > p / 2:\\n            count = count + 1\\n    \\n    if count % 2 == 0:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 107, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that fan death is a cultural myth primarily from South Korea claiming sleeping with a fan in a closed room causes death through hypothermia or asphyxiation\",\n        \"Understand that electric fans simply circulate existing air and cannot remove oxygen or create dangerous conditions in normal room environments\",\n        \"Determine that sleeping with a fan on has no harmful effects and may actually improve comfort through air circulation and white noise\"\n    ],\n    \"pseudocode\": \"def evaluate_fan_safety(fan_status, person_sleeping):\\n    myth_beliefs = ['suffocation', 'hypothermia', 'death']\\n    actual_effects = ['air_circulation', 'white_noise', 'temperature_comfort']\\n    \\n    if fan_status == 'on' and person_sleeping:\\n        for belief in myth_beliefs:\\n            is_valid = False\\n        \\n        for effect in actual_effects:\\n            is_beneficial = True\\n        \\n        return 'safe'\\n    \\n    return 'not_applicable'\",\n    \"loop_count\": 2,\n    \"branch_count\": 1,\n    \"variable_count\": 8\n}"}
{"qid": 108, "response": "{\n    \"reasoning_steps\": [\n        \"Identify transmission methods for the common cold virus, which spreads primarily through respiratory droplets and contaminated surfaces\",\n        \"Rank exposure scenarios by viral load and transmission probability, with close contact to infected individuals being highest risk\",\n        \"Evaluate each proposed method against established medical knowledge about cold virus transmission\",\n        \"Return methods that align with scientific evidence about viral transmission through person-to-person contact\"\n    ],\n    \"pseudocode\": \"def identify_cold_transmission_methods(proposed_methods):\\n    valid_methods = []\\n    for method in proposed_methods:\\n        if involves_close_contact_with_infected(method):\\n            valid_methods.append(method)\\n        elif involves_crowded_spaces(method):\\n            valid_methods.append(method)\\n        elif involves_respiratory_droplet_exposure(method):\\n            valid_methods.append(method)\\n    return valid_methods\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 3\n}"}
{"qid": 109, "response": "{\n    \"reasoning_steps\": [\n        \"Partition the rectangle R = [1, 2.5] \u00d7 [1, 2] into 3 subintervals along x-axis and 2 subintervals along y-axis, giving \u0394x = (2.5-1)/3 = 0.5 and \u0394y = (2-1)/2 = 0.5\",\n        \"Identify the 6 subrectangles and their lower-left vertices: (1,1), (1.5,1), (2,1), (1,1.5), (1.5,1.5), (2,1.5)\",\n        \"For each subrectangle, evaluate f(x,y) = xy at its lower-left vertex and multiply by the area \u0394x\u0394y = 0.25\",\n        \"Sum all contributions: 0.25[1\u00d71 + 1.5\u00d71 + 2\u00d71 + 1\u00d71.5 + 1.5\u00d71.5 + 2\u00d71.5] = 0.25\u00d711.25 = 2.8125\"\n    ],\n    \"pseudocode\": \"def calculate_riemann_sum():\\n    x_min = 1\\n    x_max = 2.5\\n    y_min = 1\\n    y_max = 2\\n    n = 3\\n    m = 2\\n    delta_x = (x_max - x_min) / n\\n    delta_y = (y_max - y_min) / m\\n    sum = 0\\n    for i in range(n):\\n        for j in range(m):\\n            x = x_min + i * delta_x\\n            y = y_min + j * delta_y\\n            sum = sum + x * y * delta_x * delta_y\\n    return sum\",\n    \"loop_count\": 2,\n    \"branch_count\": 0,\n    \"variable_count\": 13\n}"}
{"qid": 110, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that reflective surfaces have the property of reflecting electromagnetic radiation, including visible light and infrared radiation.\",\n        \"Recall that in space, without atmospheric protection, astronauts are exposed to intense solar radiation that includes harmful UV rays and significant heat.\",\n        \"Apply the principle that reflective materials reduce heat absorption by reflecting thermal radiation away from the surface, thereby preventing overheating.\",\n        \"Determine that among the given options, intense sunlight is the hazard that reflective outer layers specifically address through their optical properties.\"\n    ],\n    \"pseudocode\": \"def determine_spacesuit_protection(hazard_options):\\n    reflective_properties = ['reflects_electromagnetic_radiation', 'reduces_heat_absorption']\\n    space_hazards = {\\n        'vacuum': ['pressure_differential'],\\n        'sunlight': ['thermal_radiation', 'UV_radiation'],\\n        'micrometeoroids': ['physical_impact'],\\n        'water_loss': ['evaporation']\\n    }\\n    \\n    for hazard in hazard_options:\\n        hazard_effects = space_hazards[hazard]\\n        for effect in hazard_effects:\\n            if effect in ['thermal_radiation', 'UV_radiation']:\\n                return hazard\\n    \\n    return None\",\n    \"loop_count\": 2,\n    \"branch_count\": 1,\n    \"variable_count\": 5\n}"}
{"qid": 111, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for a Welsh university matching specific criteria: famous, top-ranking for undergraduates, has classical and modern architecture, includes a law school, and is located in an urban setting in a major city\",\n        \"Recognize that Cardiff University is the largest university in Wales, located in Cardiff which is Wales' capital and largest city, fitting the 'major city' criterion\",\n        \"Verify that Cardiff University has both historic buildings from the early 20th century and modern facilities, contains Cardiff Law School, and consistently ranks as one of the top universities in Wales\"\n    ],\n    \"pseudocode\": \"def identify_welsh_university(description):\\n    welsh_universities = ['Cardiff', 'Swansea', 'Aberystwyth', 'Bangor']\\n    major_cities = ['Cardiff']\\n    \\n    for university in welsh_universities:\\n        if university in major_cities:\\n            has_law_school = True\\n            has_mixed_architecture = True\\n            is_top_ranked = True\\n            \\n            if has_law_school and has_mixed_architecture and is_top_ranked:\\n                return university + ' University'\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 7\n}"}
{"qid": 112, "response": "{\n    \"reasoning_steps\": [\n        \"Chameleons change color primarily for thermoregulation - darker colors absorb more heat while lighter colors reflect it\",\n        \"Color changes also serve as communication signals to other chameleons for territorial displays, mating readiness, or emotional states\",\n        \"Contrary to popular belief, chameleons cannot match any background - their color range is limited by specialized skin cells called chromatophores containing specific pigments\",\n        \"Determine which reasons for color change are scientifically accurate versus common misconceptions\"\n    ],\n    \"pseudocode\": \"def identify_chameleon_color_change_reasons(potential_reasons):\\n    valid_reasons = []\\n    thermoregulation_keywords = ['temperature', 'regulate', 'heat']\\n    communication_keywords = ['territory', 'mate', 'attract', 'communicate']\\n    misconception_keywords = ['blend', 'any background', 'camouflage']\\n    \\n    for reason in potential_reasons:\\n        is_valid = False\\n        for keyword in thermoregulation_keywords:\\n            if keyword in reason:\\n                is_valid = True\\n                break\\n        if not is_valid:\\n            for keyword in communication_keywords:\\n                if keyword in reason:\\n                    is_valid = True\\n                    break\\n        has_misconception = False\\n        for keyword in misconception_keywords:\\n            if keyword in reason and 'any' in reason:\\n                has_misconception = True\\n                break\\n        if is_valid and not has_misconception:\\n            valid_reasons.append(reason)\\n    return valid_reasons\",\n    \"loop_count\": 4,\n    \"branch_count\": 5,\n    \"variable_count\": 9\n}"}
{"qid": 113, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that the decibel scale is logarithmic, not linear, where dB = 10 * log\u2081\u2080(I/I\u2080) where I is intensity and I\u2080 is reference intensity\",\n        \"Calculate the intensity ratio between 80 dB and 40 dB using the inverse formula: I = I\u2080 * 10^(dB/10)\",\n        \"For 40 dB: I\u2084\u2080 = I\u2080 * 10^(40/10) = I\u2080 * 10^4, and for 80 dB: I\u2088\u2080 = I\u2080 * 10^(80/10) = I\u2080 * 10^8\",\n        \"Compute the ratio I\u2088\u2080/I\u2084\u2080 = 10^8/10^4 = 10^4 = 10,000, showing 80 dB has 10,000 times the intensity of 40 dB\",\n        \"Apply the psychoacoustic principle that perceived loudness approximately doubles every 10 dB increase, so 80 dB is about 2^4 = 16 times as loud as 40 dB perceptually\"\n    ],\n    \"pseudocode\": \"def is_80dB_twice_as_loud_as_40dB():\\n    dB1 = 40\\n    dB2 = 80\\n    intensity_ratio = 10 ** ((dB2 - dB1) / 10)\\n    dB_difference = dB2 - dB1\\n    loudness_factor = 2 ** (dB_difference / 10)\\n    if loudness_factor == 2:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 5\n}"}
{"qid": 114, "response": "{\n    \"reasoning_steps\": [\n        \"Let x represent the numerator of the fraction, then the denominator is 3x - 7 based on the given relationship.\",\n        \"Set up the equation x/(3x-7) = 2/5 since the fraction is equivalent to 2/5.\",\n        \"Cross-multiply to get 5x = 2(3x - 7), which eliminates the fractions.\",\n        \"Expand the right side to get 5x = 6x - 14.\",\n        \"Solve for x by subtracting 6x from both sides to get -x = -14, therefore x = 14.\"\n    ],\n    \"pseudocode\": \"def find_numerator():\\n    x = 0\\n    denominator = 3 * x - 7\\n    while True:\\n        x = x + 1\\n        denominator = 3 * x - 7\\n        if denominator != 0:\\n            if x * 5 == 2 * denominator:\\n                return x\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 2\n}"}
{"qid": 115, "response": "{\n    \"reasoning_steps\": [\n        \"Calculate the distance from the origin (0,0) to the post at (4,3) using the distance formula: d = \u221a((x\u2082-x\u2081)\u00b2 + (y\u2082-y\u2081)\u00b2)\",\n        \"Recognize that the dog's reachable area forms a circle with radius 10 feet centered at (4,3)\",\n        \"Determine that the farthest point from the origin lies on the line connecting the origin through the center (4,3), extended to the far side of the circle\",\n        \"Add the rope length (10 feet) to the distance from origin to post to find the maximum distance\"\n    ],\n    \"pseudocode\": \"def find_max_distance_from_origin(post_x, post_y, rope_length):\\n    distance_origin_to_post = sqrt(post_x * post_x + post_y * post_y)\\n    max_distance = distance_origin_to_post + rope_length\\n    return max_distance\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 116, "response": "{\n    \"reasoning_steps\": [\n        \"Identify activities that are legally permitted in the Netherlands according to Dutch law, specifically prostitution which is regulated under the Dutch Criminal Code and euthanasia which is governed by the Termination of Life on Request and Assisted Suicide Act\",\n        \"Create a list to store the legal activities, ensuring each activity added is factually correct under Dutch legislation\",\n        \"Add prostitution to the list, noting that it has been legal since 2000 with regulations requiring sex workers to register and work in licensed establishments\",\n        \"Add euthanasia to the list, recognizing that the Netherlands was the first country to legalize it in 2002 under strict conditions including unbearable suffering and repeated requests\",\n        \"Return the compiled list of activities that are definitively legal under Dutch law\"\n    ],\n    \"pseudocode\": \"def get_legal_activities_netherlands():\\n    legal_activities = []\\n    legal_activities.append(\\\"Prostitution (with restrictions)\\\")\\n    legal_activities.append(\\\"Euthanasia (with restrictions)\\\")\\n    return legal_activities\",\n    \"pred_loop_count\": 0,\n    \"pred_branch_count\": 0,\n    \"pred_variable_count\": 1\n}"}
{"qid": 117, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for the co-creator of Watchmen, which requires finding who created it alongside someone else\",\n        \"Locate the sentence that explicitly states the creators: 'Watchmen, created by the UK comic-book team of writer Alan Moore and artist Dave Gibbons'\",\n        \"Extract Dave Gibbons as the co-creator since Alan Moore is mentioned as the writer and Gibbons as the artist in this creative partnership\"\n    ],\n    \"pseudocode\": \"def find_co_creator(text, question):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_creation_info(sentence):\\n            creators = extract_creators(sentence)\\n            if len(creators) == 2:\\n                return creators[1]\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 118, "response": "{\n    \"reasoning_steps\": [\n        \"Set up variables f for flour pounds and s for sugar pounds, then translate the constraints: f \u2265 6 + s/2 and f \u2264 2s\",\n        \"Combine the inequalities to form a chain: 2s \u2265 f \u2265 6 + s/2\",\n        \"Since 2s must be at least as large as 6 + s/2, solve the inequality 2s \u2265 6 + s/2\",\n        \"Simplify by subtracting s/2 from both sides to get 3s/2 \u2265 6\",\n        \"Multiply both sides by 2/3 to isolate s, yielding s \u2265 4\"\n    ],\n    \"pseudocode\": \"def find_minimum_sugar():\\n    s = 0\\n    while True:\\n        lower_bound = 6 + s / 2\\n        upper_bound = 2 * s\\n        if upper_bound >= lower_bound:\\n            return s\\n        s = s + 1\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 119, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the ellipse equation as x\u00b2/2 + y\u00b2 = 1, which has semi-major axis a = \u221a2 and semi-minor axis b = 1, with c = \u221a(a\u00b2 - b\u00b2) = 1, confirming focus F = (1,0).\",\n        \"For the reflection property to hold for all chords through F, we need angles \u2220APF and \u2220BPF to be equal, which means the slopes of AP and BP must be negatives of each other.\",\n        \"Consider a specific chord through F using the line y = x - 1, substitute into the ellipse equation to get 3x\u00b2 - 4x = 0, yielding intersection points A = (4/3, 1/3) and B = (0, -1).\",\n        \"Calculate the slopes: slope of AP is 1/(4 - 3p) and slope of BP is 1/p. Setting them as negatives gives 1/(3p - 4) = 1/p, solving to get p = 2.\",\n        \"Verify this works generally by parameterizing any line through F as y = m(x - 1), finding the intersection points using Vieta's formulas, and confirming that y_a(x_b - 2) + y_b(x_a - 2) = 0 for p = 2.\"\n    ],\n    \"pseudocode\": \"def find_reflection_point():\\n    F_x = 1\\n    F_y = 0\\n    \\n    m = 1\\n    A_x = 4/3\\n    A_y = 1/3\\n    B_x = 0\\n    B_y = -1\\n    \\n    p = 2\\n    \\n    slope_AP = A_y / (A_x - p)\\n    slope_BP = B_y / (B_x - p)\\n    \\n    if slope_AP + slope_BP == 0:\\n        return p\\n    \\n    return p\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 10\n}"}
{"qid": 120, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that inheritance refers to genetic traits passed from parents to offspring through DNA\",\n        \"Recognize that only genetically encoded traits can be inherited, not acquired characteristics or injuries\",\n        \"Evaluate each option: facial scars and broken legs are injuries acquired during life, long hair is a grooming choice, while eye color is determined by genes\",\n        \"Conclude that blue eyes is the only genetically determined trait among the options\"\n    ],\n    \"pseudocode\": \"def identify_inheritable_trait(traits):\\n    inheritable_traits = []\\n    for trait in traits:\\n        if is_genetic(trait):\\n            inheritable_traits.append(trait)\\n    return inheritable_traits\\n\\ndef is_genetic(trait):\\n    genetic_traits = ['eye_color', 'blood_type', 'hair_texture']\\n    acquired_traits = ['scars', 'injuries', 'haircuts']\\n    if trait in genetic_traits:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 121, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific paragraph that mentions what military equipment was stolen from the vault at Joint Base Lewis-McChord\",\n        \"Extract the exact items that Major Chris Ophardt confirmed were missing, which are 'scopes and night-vision goggles'\",\n        \"Note that while 'hundreds of items' were mentioned as missing, only scopes and night-vision goggles were specifically named as examples of the stolen equipment\"\n    ],\n    \"pseudocode\": \"def find_confirmed_missing_items(text):\\n    paragraphs = split_text_into_paragraphs(text)\\n    confirmed_items = []\\n    for paragraph in paragraphs:\\n        if contains_missing_items_info(paragraph):\\n            items = extract_specific_items(paragraph)\\n            if items:\\n                confirmed_items.extend(items)\\n    return confirmed_items\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 122, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that bright orange bellies in male brook trout serve dual purposes: camouflage and female attraction during reproductive season\",\n        \"Apply the principle of sexual selection where traits that increase mating success are favored by evolution\",\n        \"Identify that males with orange bellies attract more females, leading to more mating opportunities\",\n        \"Conclude that increased mating opportunities result in higher likelihood of fertilizing eggs and producing offspring\"\n    ],\n    \"pseudocode\": \"def evaluate_evolutionary_advantage(male_trait):\\n    if male_trait == \\\"bright_orange_belly\\\":\\n        camouflage_benefit = True\\n        female_attraction = True\\n        mating_success = camouflage_benefit and female_attraction\\n        if mating_success:\\n            reproductive_outcome = \\\"fertilize_eggs_produce_offspring\\\"\\n        else:\\n            reproductive_outcome = \\\"reduced_reproductive_success\\\"\\n    else:\\n        reproductive_outcome = \\\"baseline_reproductive_success\\\"\\n    return reproductive_outcome\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 123, "response": "{\n    \"reasoning_steps\": [\n        \"Recall the relationship between bulk modulus B, pressure change \u0394p, and volume change \u0394V: B = -\u0394p/(\u0394V/V\u2080), where V\u2080 is the initial volume\",\n        \"Rearrange the bulk modulus formula to solve for volume change: \u0394V = -V\u2080 \u00d7 \u0394p / B\",\n        \"Substitute the given values: V\u2080 = 0.25 m\u00b3, \u0394p = 1.6 \u00d7 10\u2077 Pa, and B = 5.0 \u00d7 10\u2079 Pa\",\n        \"Calculate the volume change and convert to units of 10\u207b\u2074 m\u00b3\"\n    ],\n    \"pseudocode\": \"def calculate_volume_decrease(V0, delta_p, B):\\n    delta_V = -V0 * delta_p / B\\n    delta_V_in_units = delta_V / (10**(-4))\\n    return delta_V_in_units\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 124, "response": "{\n    \"reasoning_steps\": [\n        \"ATM systems verify PINs by comparing the entered digits against the stored PIN hash in the bank's database\",\n        \"The PIN verification process treats the input as a specific sequence of digits that must match exactly\",\n        \"When an incorrect PIN is entered (including a reversed PIN), the ATM increments a failed attempt counter and displays an error message\",\n        \"After a certain number of failed attempts (typically 3), the ATM may retain the card for security purposes\"\n    ],\n    \"pseudocode\": \"def process_pin_entry(entered_pin, stored_pin_hash):\\n    entered_hash = hash_function(entered_pin)\\n    if entered_hash == stored_pin_hash:\\n        return \\\"ACCESS_GRANTED\\\"\\n    else:\\n        failed_attempts = failed_attempts + 1\\n        if failed_attempts >= 3:\\n            retain_card()\\n            return \\\"CARD_RETAINED\\\"\\n        else:\\n            return \\\"INCORRECT_PIN\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 3\n}"}
{"qid": 125, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that Kashmir is explicitly stated as 'a major source of dispute between India and Pakistan since the two countries were partitioned at the end of British rule in 1947'\",\n        \"Note that the text refers to Kashmir as a 'bitter problem' that needs peaceful resolution\",\n        \"Recognize that Kashmir is described as a 'conflict flashpoint between nuclear-armed neighbors India and Pakistan who both lay claims to the territory'\"\n    ],\n    \"pseudocode\": \"def find_dispute_source(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_dispute_keywords(sentence):\\n            subject = extract_subject(sentence)\\n            if is_geographic_entity(subject):\\n                return subject\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 126, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that factual knowledge about the world is accessible through empirical observation and scientific methods, not exclusive to any religious group\",\n        \"Understand that claims of exclusive knowledge based on religious affiliation contradict the principle of objective, verifiable facts\",\n        \"Determine that no empirical fact about the physical world can be known exclusively by members of one religious group\",\n        \"Return a response indicating there is no such exclusive fact\"\n    ],\n    \"pseudocode\": \"def find_exclusive_christian_facts():\\n    empirical_facts = get_all_verifiable_facts()\\n    exclusive_facts = []\\n    for fact in empirical_facts:\\n        if is_accessible_only_to_christians(fact):\\n            exclusive_facts.append(fact)\\n    if len(exclusive_facts) == 0:\\n        return \\\"I have no comment\\\"\\n    return exclusive_facts\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 127, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that California, as part of the United States, operates under First Amendment protections which generally prohibit government censorship of books\",\n        \"Identify that while some books may face challenges in specific contexts like school libraries, very few books face actual legal bans at the state level\",\n        \"Note that historical bans, such as The Grapes of Wrath being banned in some California counties in the 1930s, are no longer in effect\",\n        \"Distinguish between books that are legally banned (very rare due to constitutional protections) versus books that may be restricted in certain contexts like schools\"\n    ],\n    \"pseudocode\": \"def find_banned_books_california():\\n    banned_books = []\\n    legal_bans = get_state_legal_bans()\\n    federal_bans = get_federal_bans()\\n    \\n    for book in legal_bans:\\n        if book.state == \\\"California\\\" and book.currently_active:\\n            banned_books.append(book)\\n    \\n    for book in federal_bans:\\n        if book.applies_to_california:\\n            banned_books.append(book)\\n    \\n    historical_bans = get_historical_bans()\\n    for book in historical_bans:\\n        if book.state == \\\"California\\\" and not book.currently_active:\\n            continue\\n    \\n    if len(banned_books) == 0:\\n        return \\\"Very few books are still banned in California\\\"\\n    else:\\n        return banned_books\",\n    \"loop_count\": 3,\n    \"branch_count\": 5,\n    \"variable_count\": 6\n}"}
{"qid": 128, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that U.S. presidential elections occur every 4 years on years divisible by 4\",\n        \"Determine the current year and compare it to 2032 to establish temporal relationship\",\n        \"Apply the principle that future events cannot have already occurred or have known outcomes\",\n        \"Return an appropriate response indicating the impossibility of knowing future election results\"\n    ],\n    \"pseudocode\": \"def check_election_winner(election_year):\\n    current_year = get_current_year()\\n    if election_year > current_year:\\n        return \\\"I have no comment\\\"\\n    else:\\n        winner = lookup_historical_winner(election_year)\\n        return winner\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 129, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that Northern Ireland and England are distinct constituent countries within the United Kingdom, established by the Government of Ireland Act 1920 and subsequent agreements\",\n        \"Identify that the United Kingdom consists of four countries: England, Scotland, Wales, and Northern Ireland, each maintaining separate legal and administrative systems\",\n        \"Determine that the question contains a false premise that must be corrected by explaining the actual political structure\"\n    ],\n    \"pseudocode\": \"def explain_northern_ireland_status():\\n    uk_countries = ['England', 'Scotland', 'Wales', 'Northern Ireland']\\n    \\n    if 'Northern Ireland' in uk_countries and 'England' in uk_countries:\\n        is_same_country = False\\n        relationship = 'separate countries within the UK'\\n    \\n    return relationship\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 130, "response": "{\n    \"reasoning_steps\": [\n        \"Use Euler's formula: e^(i\u03b8) = cos(\u03b8) + i\u00b7sin(\u03b8) to interpret the given complex exponentials\",\n        \"Apply the exponential property: e^(i\u03b1) \u00b7 e^(i\u03b2) = e^(i(\u03b1+\u03b2)) to find e^(i(\u03b1+\u03b2))\",\n        \"Multiply the two complex numbers (3/5 + 4i/5) and (-12/13 + 5i/13) using FOIL method\",\n        \"Simplify the real part: (3/5)(-12/13) + (4/5)(5/13)i\u00b2 = -36/65 - 20/65 = -56/65\",\n        \"Simplify the imaginary part: (3/5)(5/13)i + (4/5)(-12/13)i = 15i/65 - 48i/65 = -33i/65\",\n        \"Extract sin(\u03b1+\u03b2) as the imaginary coefficient of e^(i(\u03b1+\u03b2)) = -56/65 - 33i/65\"\n    ],\n    \"pseudocode\": \"def find_sin_alpha_plus_beta(e_i_alpha, e_i_beta):\\n    real_alpha = 3/5\\n    imag_alpha = 4/5\\n    real_beta = -12/13\\n    imag_beta = 5/13\\n    \\n    real_product = real_alpha * real_beta - imag_alpha * imag_beta\\n    imag_product = real_alpha * imag_beta + imag_alpha * real_beta\\n    \\n    sin_alpha_plus_beta = imag_product\\n    \\n    return sin_alpha_plus_beta\",\n    \"pred_loop_count\": 0,\n    \"pred_branch_count\": 0,\n    \"pred_variable_count\": 8\n}"}
{"qid": 131, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that 420 originated from students at San Rafael High School in California who would meet at 4:20 pm to smoke marijuana\",\n        \"Recognize that popular misconceptions exist claiming 420 is a police code, but this is factually incorrect\",\n        \"Establish that the term spread from this specific group of students meeting at this specific time and became widely adopted in cannabis culture\"\n    ],\n    \"pseudocode\": \"def explain_420_origin():\\n    origin_location = \\\"San Rafael High School\\\"\\n    origin_time = \\\"4:20 pm\\\"\\n    origin_activity = \\\"students meeting to smoke\\\"\\n    \\n    misconceptions = [\\\"police code\\\", \\\"penal code\\\", \\\"LA police code\\\"]\\n    \\n    if query_about_420_origin:\\n        correct_origin = origin_location + \\\" students at \\\" + origin_time\\n        return correct_origin\\n    else:\\n        return \\\"Not a query about 420 origin\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 132, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that this is a tautological statement where we're asking if members of set P belong to set P\",\n        \"Apply the logical principle of identity: for any set S, all elements of S are elements of S\",\n        \"Since 'plants' refers to the same category in both instances, every plant must be a plant by definition\",\n        \"Return true as this is a logical tautology\"\n    ],\n    \"pseudocode\": \"def are_all_plants_plants():\\n    return True\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 0\n}"}
{"qid": 133, "response": "{\n    \"reasoning_steps\": [\n        \"Expand the expression a(b - c)\u00b3 + b(c - a)\u00b3 + c(a - b)\u00b3 using the binomial expansion (x - y)\u00b3 = x\u00b3 - 3x\u00b2y + 3xy\u00b2 - y\u00b3\",\n        \"Group terms and factor out (a - b) by recognizing that terms containing (b - a) can be rewritten as -(a - b)\",\n        \"From the remaining expression after factoring (a - b), factor out (b - c) by grouping terms with this common factor\",\n        \"From the final remaining expression, factor out (c - a) to obtain the polynomial p(a,b,c)\"\n    ],\n    \"pseudocode\": \"def factor_expression(a, b, c):\\n    expanded = -a**3*b + a*b**3 - b**3*c + b*c**3 + a**3*c - a*c**3\\n    \\n    term1 = a*b*(b**2 - a**2)\\n    term2 = (a**3 - b**3)*c\\n    term3 = (b - a)*c**3\\n    \\n    factor1 = a*b*(b - a)*(b + a)\\n    factor2 = (a - b)*(a**2 + a*b + b**2)*c\\n    factor3 = (b - a)*c**3\\n    \\n    after_first = -a**2*b + a**2*c - a*b**2 + a*b*c + b**2*c - c**3\\n    \\n    term4 = a**2*(c - b)\\n    term5 = a*b*(c - b)\\n    term6 = c*(b**2 - c**2)\\n    \\n    after_second = -a**2 - a*b + b*c + c**2\\n    \\n    term7 = c**2 - a**2\\n    term8 = b*(c - a)\\n    \\n    p = a + b + c\\n    \\n    return p\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 17\n}"}
{"qid": 134, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that carpets are inanimate objects made of woven fabric materials that lack any propulsion mechanisms or aerodynamic properties necessary for flight\",\n        \"Apply the fundamental principle that objects require either aerodynamic lift (like wings), buoyancy (like balloons), or thrust (like rockets) to overcome gravity and achieve flight\",\n        \"Conclude that since carpets possess none of these physical properties, they cannot fly in reality despite their presence in folklore and fiction\"\n    ],\n    \"pseudocode\": \"def can_carpets_fly():\\n    has_propulsion = False\\n    has_aerodynamic_lift = False\\n    has_buoyancy = False\\n    \\n    if has_propulsion or has_aerodynamic_lift or has_buoyancy:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 135, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of life sentences to identify who received this punishment\",\n        \"Locate the specific passage stating 'Ma Khin Khin Leh, who was serving a life sentence' in the third paragraph\",\n        \"Verify this is confirmed later in the text where it states 'the life sentence given to Ma Khin Khin Leh'\",\n        \"Extract and return the name 'Ma Khin Khin Leh' as the person sentenced to life\"\n    ],\n    \"pseudocode\": \"def find_life_sentence_recipient(text):\\n    sentences = split_into_sentences(text)\\n    result = []\\n    for sentence in sentences:\\n        if contains_phrase(sentence, \\\"life sentence\\\"):\\n            words = split_into_words(sentence)\\n            for i in range(len(words)):\\n                if words[i] == \\\"Ma\\\" and i+3 < len(words):\\n                    if words[i+1] == \\\"Khin\\\" and words[i+2] == \\\"Khin\\\" and words[i+3] == \\\"Leh\\\":\\n                        result.append(\\\"Ma Khin Khin Leh\\\")\\n    return result\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 136, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that throughput in a multi-link path is limited by the bottleneck link theorem, which states that the end-to-end throughput cannot exceed the capacity of the slowest link\",\n        \"Convert all link rates to the same unit (kbps) for comparison: R1 = 500 kbps, R2 = 2000 kbps, R3 = 1000 kbps\",\n        \"Find the minimum rate among all links in the path, as this determines the maximum achievable throughput\",\n        \"Return the bottleneck link rate as the throughput\"\n    ],\n    \"pseudocode\": \"def calculate_throughput(R1, R2, R3):\\n    R1_kbps = 500\\n    R2_kbps = 2 * 1000\\n    R3_kbps = 1 * 1000\\n    bottleneck = R1_kbps\\n    if R2_kbps < bottleneck:\\n        bottleneck = R2_kbps\\n    if R3_kbps < bottleneck:\\n        bottleneck = R3_kbps\\n    return bottleneck\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 137, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that both fox and eagle consume the same organisms, meaning they share a food source in the ecosystem\",\n        \"Recognize that when two species utilize the same limited resource, they experience interspecific competition\",\n        \"Distinguish competition from other ecological relationships: mutualism involves mutual benefit, predation involves one organism consuming another, and parasitism involves one organism living on/in another while harming it\",\n        \"Conclude that since fox and eagle are competing for the same prey organisms, their relationship is competitive\"\n    ],\n    \"pseudocode\": \"def classify_ecological_relationship(species1, species2, shared_resources):\\n    if len(shared_resources) > 0:\\n        for resource in shared_resources:\\n            if resource == 'food':\\n                return 'competition'\\n    return 'no_competition'\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 138, "response": "{\n    \"reasoning_steps\": [\n        \"Given the equation 4 = a + a^(-1), square both sides to obtain 16 = (a + a^(-1))^2 = a^2 + 2 + a^(-2), which simplifies to a^2 + a^(-2) = 14\",\n        \"To find a^4 + a^(-4), square the expression a^2 + a^(-2) = 14 to get 196 = (a^2 + a^(-2))^2 = a^4 + 2 + a^(-4)\",\n        \"Solve for a^4 + a^(-4) by subtracting 2 from both sides: a^4 + a^(-4) = 196 - 2 = 194\"\n    ],\n    \"pseudocode\": \"def find_fourth_power_sum(initial_sum):\\n    a_plus_inv = initial_sum\\n    a_squared_plus_inv_squared = a_plus_inv * a_plus_inv - 2\\n    a_fourth_plus_inv_fourth = a_squared_plus_inv_squared * a_squared_plus_inv_squared - 2\\n    return a_fourth_plus_inv_fourth\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 4\n}"}
{"qid": 139, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that the Discrete Fourier Transform (DFT) assumes the input sequence x(n) is periodic with period N, meaning x(n) = x(n+N) for all n.\",\n        \"This periodicity is a fundamental property of the DFT, as it treats any N-point sequence as one period of an infinitely repeating signal.\",\n        \"Since X(k) is computed from x(n) using the DFT formula, and the DFT inherently assumes N-periodicity, the statement x(n+N) = x(n) must hold true.\"\n    ],\n    \"pseudocode\": \"def verify_dft_periodicity(x, N):\\n    n = 0\\n    while n < len(x):\\n        if x[n] != x[(n + N) % len(x)]:\\n            return False\\n        n = n + 1\\n    return True\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 140, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that a fraction equals zero if and only if its numerator equals zero and its denominator is non-zero.\",\n        \"Set the numerator x-3 equal to zero and solve for x.\",\n        \"Verify that the denominator 4x is non-zero at the solution x=3.\"\n    ],\n    \"pseudocode\": \"def find_zero_of_fraction():\\n    x = 3\\n    numerator = x - 3\\n    denominator = 4 * x\\n    if numerator == 0 and denominator != 0:\\n        return x\\n    return None\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 141, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific information about ships currently held by Somali pirates in the text\",\n        \"Locate the sentence that states 'Somali pirates are still holding four ships for ransom with 80 crew members as hostages'\",\n        \"Extract the number 'four' as the count of ships still being held\"\n    ],\n    \"pseudocode\": \"def find_ships_held(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_phrase(sentence, \\\"still holding\\\") and contains_phrase(sentence, \\\"ships\\\"):\\n            number = extract_number_before_word(sentence, \\\"ships\\\")\\n            return number\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 142, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that stout beardfish live in the deep ocean where there is no light, making vision-based adaptations ineffective.\",\n        \"Identify that in lightless environments, organisms rely on non-visual sensory adaptations such as mechanoreception or chemoreception for navigation and food detection.\",\n        \"Evaluate each characteristic: bristles in mouth help filter feeding, bright colors serve no purpose without light, swimming speed aids escape but not food location, whiskers act as sensory organs.\",\n        \"Conclude that whiskers function as tactile or chemical sensors, similar to how catfish use barbels to detect food in murky water where visibility is poor.\"\n    ],\n    \"pseudocode\": \"def find_best_adaptation(characteristics, environment):\\n    if environment == \\\"no_light\\\":\\n        best_score = -1\\n        best_char = None\\n        for char in characteristics:\\n            score = 0\\n            if char == \\\"whiskers_for_food_location\\\":\\n                score = 10\\n            elif char == \\\"swimming_speed\\\":\\n                score = 5\\n            elif char == \\\"mouth_bristles\\\":\\n                score = 3\\n            elif char == \\\"bright_colors\\\":\\n                score = 0\\n            if score > best_score:\\n                best_score = score\\n                best_char = char\\n        return best_char\",\n    \"loop_count\": 1,\n    \"branch_count\": 6,\n    \"variable_count\": 5\n}"}
{"qid": 143, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that pollen transfer between flowers is essential for plant reproduction through cross-pollination\",\n        \"Identify that when the hummingbird visits multiple flowers, pollen from one flower can be deposited on another flower's stigma\",\n        \"Conclude that the hummingbird acts as a pollinator, facilitating plant reproduction by transferring pollen between flowers\"\n    ],\n    \"pseudocode\": \"def determine_hummingbird_role(choices):\\n    pollination_role = None\\n    for choice in choices:\\n        if choice contains reproduction concept:\\n            pollination_role = choice\\n    return pollination_role\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 144, "response": "{\n    \"reasoning_steps\": [\n        \"Set up variables for Ted's age (t) and Sally's age (s) based on the problem statement.\",\n        \"Translate 'Ted's age is 15 years less than twice Sally's age' into the equation t = 2s - 15.\",\n        \"Translate 'The sum of their ages is 54' into the equation t + s = 54.\",\n        \"Solve for s in terms of t using the sum equation: s = 54 - t.\",\n        \"Substitute the expression for s into the first equation to eliminate s and solve for t.\",\n        \"Simplify the resulting equation t = 2(54 - t) - 15 to find t = 31.\"\n    ],\n    \"pseudocode\": \"def find_teds_age():\\n    # From t + s = 54, express s in terms of t\\n    # s = 54 - t\\n    \\n    # Substitute into t = 2s - 15\\n    # t = 2(54 - t) - 15\\n    # t = 108 - 2t - 15\\n    # t = 93 - 2t\\n    # 3t = 93\\n    # t = 31\\n    \\n    t = 31\\n    return t\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 1\n}"}
{"qid": 145, "response": "{\n    \"reasoning_steps\": [\n        \"Use the method of Lagrange multipliers to find extrema of f(x,y) = x\u00b2 + y\u00b2 subject to the constraint g(x,y) = x\u00b2 + 2y\u00b2 - 1 = 0\",\n        \"Set up the Lagrangian system: \u2207f = \u03bb\u2207g, which gives us 2x = \u03bb(2x) and 2y = \u03bb(4y)\",\n        \"From the first equation, either x = 0 or \u03bb = 1. From the second equation, either y = 0 or \u03bb = 1/2\",\n        \"Case 1: If x = 0, then from the constraint 2y\u00b2 = 1, so y = \u00b11/\u221a2, giving f(0, \u00b11/\u221a2) = 1/2\",\n        \"Case 2: If y = 0, then from the constraint x\u00b2 = 1, so x = \u00b11, giving f(\u00b11, 0) = 1\",\n        \"Case 3: If \u03bb = 1 from the first equation and \u03bb = 1/2 from the second, we have a contradiction unless y = 0\",\n        \"Compare all critical points: f(0, \u00b11/\u221a2) = 1/2 and f(\u00b11, 0) = 1, so the minimum is 1/2\"\n    ],\n    \"pseudocode\": \"def find_minimum():\\n    critical_points = []\\n    \\n    x1 = 0\\n    y1_pos = 1 / sqrt(2)\\n    y1_neg = -1 / sqrt(2)\\n    f1_pos = x1 * x1 + y1_pos * y1_pos\\n    f1_neg = x1 * x1 + y1_neg * y1_neg\\n    critical_points.append(f1_pos)\\n    critical_points.append(f1_neg)\\n    \\n    y2 = 0\\n    x2_pos = 1\\n    x2_neg = -1\\n    f2_pos = x2_pos * x2_pos + y2 * y2\\n    f2_neg = x2_neg * x2_neg + y2 * y2\\n    critical_points.append(f2_pos)\\n    critical_points.append(f2_neg)\\n    \\n    min_value = critical_points[0]\\n    for value in critical_points:\\n        if value < min_value:\\n            min_value = value\\n    \\n    return min_value\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 14\n}"}
{"qid": 146, "response": "{\n    \"reasoning_steps\": [\n        \"Recall the triple angle formula for cosine: cos(3\u03b8) = 4cos\u00b3(\u03b8) - 3cos(\u03b8).\",\n        \"Rearrange the triple angle formula to express cos\u00b3(\u03b8) in terms of cos(3\u03b8) and cos(\u03b8).\",\n        \"Solve for cos\u00b3(\u03b8) by isolating it: cos\u00b3(\u03b8) = (cos(3\u03b8) + 3cos(\u03b8))/4.\",\n        \"Identify the coefficients a and b by comparing with the target form a\u00b7cos(3\u03b8) + b\u00b7cos(\u03b8).\"\n    ],\n    \"pseudocode\": \"def find_coefficients():\\n    a = 1/4\\n    b = 3/4\\n    return (a, b)\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 2\n}"}
{"qid": 147, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about etymological origin of a specific English word\",\n        \"Recognize that the correct answer indicates Germanic cognates related to 'striking' and acknowledges uncertainty in the etymology\",\n        \"Note that multiple false etymologies exist (acronym theories) that need to be distinguished from the scholarly consensus\",\n        \"Implement a lookup mechanism that returns the established linguistic explanation while avoiding folk etymologies\"\n    ],\n    \"pseudocode\": \"def find_word_origin(word):\\n    etymology_database = {\\n        'f-word': {\\n            'primary': 'probably cognate with Germanic words meaning striking',\\n            'secondary': 'possibly from Old French meaning to have sex',\\n            'certainty': 'not known with certainty'\\n        }\\n    }\\n    \\n    if word in etymology_database:\\n        origin_data = etymology_database[word]\\n        result = origin_data['primary']\\n        if origin_data['certainty'] == 'not known with certainty':\\n            result = result + ', ' + origin_data['certainty']\\n        return result\\n    else:\\n        return 'Unknown origin'\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 148, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for players who scored goals against Rangers in the described match\",\n        \"Scan the text for explicit mentions of goal scorers, noting that Darren O'Dea scored from a header after a Nakamura free-kick in extra time\",\n        \"Continue scanning to find that Aiden McGeady scored from a penalty in added time after Broadfoot was red-carded\",\n        \"Compile the list of goal scorers against Rangers: Darren O'Dea and Aiden McGeady\"\n    ],\n    \"pseudocode\": \"def find_goal_scorers(text, question):\\n    goal_scorers = []\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_goal_scoring_info(sentence):\\n            scorer = extract_scorer_name(sentence)\\n            if scorer not in goal_scorers:\\n                goal_scorers.append(scorer)\\n    return goal_scorers\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 149, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the signal frequency from x(t) = cos(1000\u03c0t), where the angular frequency \u03c9 = 1000\u03c0 rad/s, so the signal frequency f = \u03c9/(2\u03c0) = 500 Hz\",\n        \"Apply the Nyquist-Shannon sampling theorem which states that to avoid aliasing, the sampling frequency must be at least twice the highest frequency component in the signal\",\n        \"Calculate the Nyquist rate as 2 \u00d7 500 Hz = 1000 Hz\",\n        \"Compare the given sampling frequency (700 Hz) with the Nyquist rate (1000 Hz) to determine if aliasing occurs\"\n    ],\n    \"pseudocode\": \"def check_aliasing(signal_angular_freq, sampling_freq):\\n    signal_freq = signal_angular_freq / (2 * pi)\\n    nyquist_rate = 2 * signal_freq\\n    if sampling_freq < nyquist_rate:\\n        aliasing_occurs = True\\n    else:\\n        aliasing_occurs = False\\n    return aliasing_occurs\",\n    \"pred_loop_count\": 0,\n    \"pred_branch_count\": 2,\n    \"pred_variable_count\": 4\n}"}
{"qid": 150, "response": "{\n    \"reasoning_steps\": [\n        \"Apply Vieta's formulas to find the sum and product of roots: for ax\u00b2 + bx + c = 0, sum = -b/a and product = c/a\",\n        \"For x\u00b2 - 13x + 4 = 0, calculate r\u2081 + r\u2082 = 13 and r\u2081r\u2082 = 4\",\n        \"Use the algebraic identity (r\u2081 + r\u2082)\u00b2 = r\u2081\u00b2 + 2r\u2081r\u2082 + r\u2082\u00b2 to relate the sum of squares to known values\",\n        \"Rearrange to isolate r\u2081\u00b2 + r\u2082\u00b2 = (r\u2081 + r\u2082)\u00b2 - 2r\u2081r\u2082\",\n        \"Substitute the known values to compute r\u2081\u00b2 + r\u2082\u00b2 = 13\u00b2 - 2(4) = 169 - 8 = 161\"\n    ],\n    \"pseudocode\": \"def sum_of_squares_of_roots(a, b, c):\\n    sum_of_roots = -b / a\\n    product_of_roots = c / a\\n    sum_squared = sum_of_roots * sum_of_roots\\n    sum_of_squares = sum_squared - 2 * product_of_roots\\n    return sum_of_squares\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 4\n}"}
{"qid": 151, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the myth about birds exploding from uncooked rice is false - birds regularly consume various grains and seeds in nature without harm.\",\n        \"Understand that birds have digestive systems adapted to process hard seeds and grains, including the ability to grind food in their gizzards.\",\n        \"Determine that uncooked rice poses no special danger compared to other seeds birds naturally consume, so the answer should indicate no harmful effects occur.\"\n    ],\n    \"pseudocode\": \"def what_happens_when_birds_eat_uncooked_rice():\\n    bird_can_digest_grains = True\\n    rice_is_grain = True\\n    myth_is_false = True\\n    \\n    if bird_can_digest_grains and rice_is_grain and myth_is_false:\\n        result = \\\"Nothing in particular happens\\\"\\n    else:\\n        result = \\\"Harmful effect occurs\\\"\\n    \\n    return result\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 152, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific question about solutions to long and short-term hunger from the text.\",\n        \"Locate the relevant passage that directly addresses solutions to hunger in both timeframes.\",\n        \"Extract the specific recommendation mentioned in the report for tackling both long and short-term hunger.\",\n        \"Note that the report explicitly calls for 'greater investment in agriculture' as the solution to address hunger issues.\"\n    ],\n    \"pseudocode\": \"def find_hunger_solution(text, question):\\n    sentences = split_into_sentences(text)\\n    solution = \\\"\\\"\\n    for sentence in sentences:\\n        if contains_keywords(sentence, [\\\"solution\\\", \\\"long\\\", \\\"short\\\", \\\"term\\\", \\\"hunger\\\"]):\\n            solution = extract_solution(sentence)\\n        elif contains_keywords(sentence, [\\\"calls for\\\", \\\"tackle\\\", \\\"hunger\\\"]):\\n            solution = extract_recommendation(sentence)\\n    return solution\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 153, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that vampires are mythological creatures from folklore and fiction, not real entities that exist in the physical world\",\n        \"Since vampires are fictional beings, there is no actual time or circumstance when one needs to watch out for them\",\n        \"Return a response indicating that watching out for vampires is unnecessary because they do not exist in reality\"\n    ],\n    \"pseudocode\": \"def when_to_watch_for_vampires():\\n    vampires_exist = False\\n    if vampires_exist:\\n        return \\\"Watch out at specific times\\\"\\n    else:\\n        return \\\"No need to watch out - vampires are fictional\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 1\n}"}
{"qid": 154, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that maximizing entropy subject to a mean constraint requires the maximum entropy distribution, which for non-negative integers with given mean is the geometric distribution\",\n        \"For a geometric distribution with parameter p, the mean is (1-p)/p, so setting E(X)=1 gives us (1-p)/p = 1, which solves to p = 1/2\",\n        \"The entropy of a geometric distribution with parameter p is H(X) = -(1-p)log\u2082(1-p) - p log\u2082(p) / p\",\n        \"Substitute p = 1/2 into the entropy formula to get H(X) = -0.5 log\u2082(0.5) - 0.5 log\u2082(0.5) / 0.5 = 0.5 + 0.5/0.5 = 0.5 + 1 = 2\"\n    ],\n    \"pseudocode\": \"def maximize_entropy_with_mean_constraint():\\n    p = 1 / 2\\n    term1 = -(1 - p) * log2(1 - p)\\n    term2 = -p * log2(p)\\n    entropy = (term1 + term2) / p\\n    return entropy\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 4\n}"}
{"qid": 155, "response": "{\n    \"reasoning_steps\": [\n        \"Historical labor data shows that annual work days have declined from approximately 3000+ days in the 1870s to around 1800-2000 days today due to labor reforms, weekends, and paid vacation policies.\",\n        \"California follows federal labor standards and has additional state protections that limit work hours and mandate rest days, contributing to the overall decline in annual work days.\",\n        \"To determine if Californians work more days now, we need to compare historical work day averages with current averages, accounting for the introduction of the 40-hour work week and mandatory holidays.\",\n        \"The comparison will show that modern workers have fewer annual work days due to established weekends, federal holidays, and vacation time that didn't exist in earlier periods.\"\n    ],\n    \"pseudocode\": \"def compare_work_days():\\n    historical_work_days = 3000\\n    modern_work_days = 1800\\n    \\n    if modern_work_days < historical_work_days:\\n        trend = \\\"declined\\\"\\n    else:\\n        trend = \\\"increased\\\"\\n    \\n    return trend\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 3\n}"}
{"qid": 156, "response": "{\n    \"reasoning_steps\": [\n        \"Use the y-intercept condition: when x=0, the first parabola gives 2013 = 3(0-h)\u00b2 + j = 3h\u00b2 + j, and the second gives 2014 = 2(0-h)\u00b2 + k = 2h\u00b2 + k.\",\n        \"Substitute j = 2013 - 3h\u00b2 and k = 2014 - 2h\u00b2 back into the original equations to get y = 3(x-h)\u00b2 + 2013 - 3h\u00b2 and y = 2(x-h)\u00b2 + 2014 - 2h\u00b2.\",\n        \"Expand and factor the equations: y = 3(x\u00b2 - 2hx + h\u00b2) + 2013 - 3h\u00b2 = 3(x\u00b2 - 2hx + 671) and y = 2(x\u00b2 - 2hx + h\u00b2) + 2014 - 2h\u00b2 = 2(x\u00b2 - 2hx + 1007).\",\n        \"Apply Vieta's formulas: for a quadratic x\u00b2 - 2hx + c with roots r\u2081 and r\u2082, we have r\u2081 + r\u2082 = 2h and r\u2081 \u00d7 r\u2082 = c.\",\n        \"Find factor pairs of 671 and 1007: 671 = 11 \u00d7 61 and 1007 = 19 \u00d7 53, where both pairs consist of positive integers.\",\n        \"Since both parabolas must have the same value of h, we need 11 + 61 = 19 + 53 = 72, giving h = 36.\"\n    ],\n    \"pseudocode\": \"def find_h():\\n    factors_671 = find_factor_pairs(671)\\n    factors_1007 = find_factor_pairs(1007)\\n    \\n    for pair1 in factors_671:\\n        sum1 = pair1[0] + pair1[1]\\n        for pair2 in factors_1007:\\n            sum2 = pair2[0] + pair2[1]\\n            if sum1 == sum2:\\n                h = sum1 / 2\\n                return h\\n    \\n    return None\\n\\ndef find_factor_pairs(n):\\n    pairs = []\\n    i = 1\\n    while i * i <= n:\\n        if n % i == 0:\\n            pairs.append([i, n // i])\\n        i = i + 1\\n    return pairs\",\n    \"loop_count\": 3,\n    \"branch_count\": 2,\n    \"variable_count\": 9\n}"}
{"qid": 157, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that historical attribution of the first American flag's designer lacks definitive documentation and remains disputed among historians\",\n        \"Identify multiple claimed designers including Betsy Ross, Francis Hopkinson, and others, noting that the Betsy Ross story emerged nearly a century after 1776\",\n        \"Evaluate available evidence: Francis Hopkinson submitted a bill to Congress for flag design in 1780, while the Betsy Ross narrative relies solely on family oral tradition from the 1870s\",\n        \"Conclude that without contemporary documentation from 1776-1777, no single designer can be definitively credited\"\n    ],\n    \"pseudocode\": \"def identify_flag_designer():\\n    historical_claims = [\\\"Betsy Ross\\\", \\\"Francis Hopkinson\\\", \\\"Unknown committee\\\", \\\"Collaborative effort\\\"]\\n    documented_evidence = []\\n    \\n    for claim in historical_claims:\\n        if has_contemporary_documentation(claim):\\n            documented_evidence.append(claim)\\n    \\n    if len(documented_evidence) == 0:\\n        return \\\"No consensus on designer\\\"\\n    elif len(documented_evidence) == 1:\\n        return documented_evidence[0]\\n    else:\\n        return \\\"Multiple possible designers\\\"\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 3\n}"}
{"qid": 158, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that income inequality is measured by the Gini coefficient, where higher values indicate greater inequality\",\n        \"Identify that the US has a Gini coefficient around 0.41-0.48, placing it among developed nations with higher inequality\",\n        \"Compare with Latin American countries like Brazil (Gini ~0.53), Colombia (~0.51), and Mexico (~0.45) which have higher inequality than the US\",\n        \"Contrast with European nations like Sweden (~0.27), Finland (~0.26), and Germany (~0.31) which have lower inequality than the US\"\n    ],\n    \"pseudocode\": \"def find_countries_with_higher_inequality(target_country):\\n    gini_coefficients = {\\n        'US': 0.41,\\n        'Brazil': 0.53,\\n        'Colombia': 0.51,\\n        'Mexico': 0.45,\\n        'Sweden': 0.27,\\n        'Finland': 0.26,\\n        'Germany': 0.31,\\n        'UK': 0.35,\\n        'Canada': 0.33\\n    }\\n    \\n    target_gini = gini_coefficients[target_country]\\n    countries_with_higher_inequality = []\\n    \\n    for country in gini_coefficients:\\n        if gini_coefficients[country] > target_gini:\\n            countries_with_higher_inequality.append(country)\\n    \\n    return countries_with_higher_inequality\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 5\n}"}
{"qid": 159, "response": "{\n    \"reasoning_steps\": [\n        \"Calculate the data size per pixel using YUV 4:2:2 format, where Y is sampled at full resolution and U,V are sampled at half horizontal resolution, giving 2 bytes per pixel on average\",\n        \"Compute the total data size per frame by multiplying resolution (1920\u00d71080) by bytes per pixel\",\n        \"Calculate total frames in one hour using frame rate of 30 fps and 3600 seconds per hour\",\n        \"Multiply frame size by total frames to get total bytes, then convert to gigabytes by dividing by 10^9\"\n    ],\n    \"pseudocode\": \"def calculate_video_storage():\\n    width = 1920\\n    height = 1080\\n    bits_per_component = 8\\n    frame_rate = 30\\n    duration_seconds = 3600\\n    \\n    bytes_per_pixel = 2\\n    pixels_per_frame = width * height\\n    bytes_per_frame = pixels_per_frame * bytes_per_pixel\\n    \\n    total_frames = frame_rate * duration_seconds\\n    total_bytes = bytes_per_frame * total_frames\\n    \\n    gigabytes = total_bytes / 1000000000\\n    \\n    return gigabytes\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 11\n}"}
{"qid": 160, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that Fourier Descriptors represent shape contours in frequency domain, where low-frequency components capture overall shape and high-frequency components capture fine details or noise\",\n        \"Compare the given descriptors: object O has (80,40,0,0,-1,0,0,1) while a perfect circle has (0,40,0,0,0,0,0,0)\",\n        \"Identify that both have the same second coefficient (40), which represents the fundamental circular component\",\n        \"Note that object O has small high-frequency components (-1 at position 5 and 1 at position 8) which likely represent noise as mentioned in the problem\",\n        \"Recognize that the DC component difference (80 vs 0) represents a translation offset and doesn't affect the shape itself\",\n        \"Conclude that object O is circle-like since it shares the dominant circular frequency component with only minor high-frequency noise\"\n    ],\n    \"pseudocode\": \"def is_circle_like(object_descriptors, circle_descriptors):\\n    obj_fd = object_descriptors\\n    circ_fd = circle_descriptors\\n    \\n    fundamental_match = (obj_fd[1] == circ_fd[1])\\n    \\n    high_freq_sum = 0\\n    for i in range(4, len(obj_fd)):\\n        high_freq_sum = high_freq_sum + abs(obj_fd[i])\\n    \\n    noise_threshold = 5\\n    is_noise_small = (high_freq_sum < noise_threshold)\\n    \\n    if fundamental_match and is_noise_small:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 7\n}"}
{"qid": 161, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that fossil fuel combustion releases various pollutants including particulate matter (PM2.5 and PM10), sulfur dioxide, nitrogen oxides, and carbon compounds.\",\n        \"Identify that particulate matter directly affects air quality by creating visible smog and entering human respiratory systems, causing immediate health impacts.\",\n        \"Note that while CO2 is a greenhouse gas affecting climate, it doesn't directly impact breathable air quality at current atmospheric concentrations.\",\n        \"Understand that acid precipitation and ozone depletion are secondary effects that don't directly affect the air people breathe in real-time.\"\n    ],\n    \"pseudocode\": \"def identify_primary_air_quality_impact():\\n    fossil_fuel_pollutants = ['particulate_matter', 'SO2', 'NOx', 'CO2']\\n    direct_breathing_impacts = []\\n    \\n    for pollutant in fossil_fuel_pollutants:\\n        if pollutant == 'particulate_matter':\\n            impact_score = 10\\n            direct_breathing_impacts.append((pollutant, impact_score))\\n        elif pollutant == 'CO2':\\n            impact_score = 1\\n            direct_breathing_impacts.append((pollutant, impact_score))\\n        else:\\n            impact_score = 5\\n            direct_breathing_impacts.append((pollutant, impact_score))\\n    \\n    max_impact = 0\\n    primary_cause = ''\\n    \\n    for impact in direct_breathing_impacts:\\n        if impact[1] > max_impact:\\n            max_impact = impact[1]\\n            primary_cause = impact[0]\\n    \\n    return primary_cause\",\n    \"loop_count\": 2,\n    \"branch_count\": 4,\n    \"variable_count\": 7\n}"}
{"qid": 162, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that pure water freezes at 0\u00b0C under standard atmospheric pressure, regardless of its initial temperature or volume.\",\n        \"When Laura mixes 50 mL of boiling water with 100 mL of ice water, she creates 150 mL of water at some intermediate temperature.\",\n        \"The freezing point of pure water remains constant at 0\u00b0C, independent of the mixing process or the resulting temperature of the mixture.\",\n        \"When the 150 mL mixture is placed in a freezer, it will cool down and begin to freeze once it reaches 0\u00b0C.\"\n    ],\n    \"pseudocode\": \"def find_freezing_temperature(boiling_water_volume, ice_water_volume):\\n    total_volume = boiling_water_volume + ice_water_volume\\n    freezing_point_celsius = 0\\n    return freezing_point_celsius\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 163, "response": "{\n    \"reasoning_steps\": [\n        \"Since |z| = 1, we can express z in polar form as z = cis(\u03b8) = cos(\u03b8) + i\u00b7sin(\u03b8) where 0\u00b0 \u2264 \u03b8 < 360\u00b0.\",\n        \"Calculate z^{6!} - z^{5!} = z^{720} - z^{120} = cis(720\u03b8) - cis(120\u03b8) using De Moivre's theorem.\",\n        \"For the expression to be real, the imaginary part must be zero: sin(720\u03b8) - sin(120\u03b8) = 0.\",\n        \"Apply the sum-to-product formula: sin(A) - sin(B) = 2\u00b7cos((A+B)/2)\u00b7sin((A-B)/2) to get 2\u00b7cos(420\u03b8)\u00b7sin(300\u03b8) = 0.\",\n        \"Solve cos(420\u03b8) = 0, which occurs when 420\u03b8 = (2n+1)\u00b790\u00b0 for integer n, giving \u03b8 = (2n+1)\u00b790\u00b0/420.\",\n        \"Count valid values of n: since 0\u00b0 \u2264 \u03b8 < 360\u00b0, we need 0 \u2264 (2n+1)\u00b790/420 < 360, yielding n \u2208 {0, 1, ..., 839}.\",\n        \"Solve sin(300\u03b8) = 0, which occurs when 300\u03b8 = m\u00b7180\u00b0 for integer m, giving \u03b8 = m\u00b7180\u00b0/300.\",\n        \"Count valid values of m: since 0\u00b0 \u2264 \u03b8 < 360\u00b0, we need 0 \u2264 m\u00b7180/300 < 360, yielding m \u2208 {0, 1, ..., 599}.\",\n        \"Check for overlapping solutions by setting (2n+1)\u00b790/420 = m\u00b7180/300, which simplifies to 5(2n+1) = 14m.\",\n        \"Since 5(2n+1) is always odd and 14m is always even, there are no integer solutions, so no overlap exists.\",\n        \"Sum the counts: 840 + 600 = 1440 distinct values of \u03b8, hence 1440 distinct complex numbers z.\"\n    ],\n    \"pseudocode\": \"def count_complex_numbers():\\n    count_cos_zero = 0\\n    count_sin_zero = 0\\n    \\n    n = 0\\n    while (2*n + 1) * 90 / 420 < 360:\\n        count_cos_zero = count_cos_zero + 1\\n        n = n + 1\\n    \\n    m = 0\\n    while m * 180 / 300 < 360:\\n        count_sin_zero = count_sin_zero + 1\\n        m = m + 1\\n    \\n    overlap_exists = False\\n    n = 0\\n    while n < count_cos_zero:\\n        m = 0\\n        while m < count_sin_zero:\\n            if 5 * (2*n + 1) == 14 * m:\\n                overlap_exists = True\\n            m = m + 1\\n        n = n + 1\\n    \\n    if overlap_exists:\\n        return count_cos_zero + count_sin_zero - overlap_count\\n    else:\\n        return count_cos_zero + count_sin_zero\",\n    \"loop_count\": 5,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 164, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific time reference 'two years ago' in the text to locate the relevant information\",\n        \"Search for actions Mendes performed in connection with PETA's campaign at that time\",\n        \"Extract the exact phrase describing her participation in the 'Rather Go Naked Than Wear Fur' campaign\"\n    ],\n    \"pseudocode\": \"def find_mendes_action_two_years_ago(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_phrase(sentence, \\\"two years ago\\\") and contains_phrase(sentence, \\\"campaign\\\"):\\n            action = extract_action_phrase(sentence)\\n            return action\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 165, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that this is an experimental design problem where students are testing the effect of force from a baseball bat on a ball\",\n        \"Recognize that a well-designed experiment must have one independent variable (what you change), one dependent variable (what you measure), and controlled variables (what stays the same)\",\n        \"Analyze that the students are marking contact points on the bat, which suggests they're varying where the ball hits the bat, but the question states they're investigating 'the effect of the force' without clearly defining what aspect of force\",\n        \"Determine that without defining a single testable variable (e.g., bat swing speed, contact point location, or force magnitude), the experiment cannot establish cause-and-effect relationships\"\n    ],\n    \"pseudocode\": \"def analyze_experimental_design(experiment_description):\\n    has_independent_variable = False\\n    has_dependent_variable = False\\n    variables_clearly_defined = False\\n    \\n    if experiment_description contains multiple changing factors:\\n        has_multiple_variables = True\\n    \\n    if experiment_description lacks clear definition of what is being changed:\\n        variables_clearly_defined = False\\n    \\n    if not has_independent_variable or not variables_clearly_defined:\\n        error_type = 'failure to define one testable variable'\\n    \\n    return error_type\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
{"qid": 166, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that chemical reactions produce new substances and often release energy as light, heat, or gas\",\n        \"Evaluate option A: burning magnesium produces magnesium oxide and releases energy as bright white light - this is combustion, a chemical reaction\",\n        \"Evaluate option B: evaporation is a physical change where water molecules gain energy and change phase, but remain H2O molecules\",\n        \"Evaluate option C: fizzing in soft drinks is CO2 escaping from solution, a physical process of dissolved gas leaving liquid\",\n        \"Evaluate option D: light bulb heat is from electrical resistance in the filament, a physical process not creating new substances\"\n    ],\n    \"pseudocode\": \"def identify_chemical_reaction_evidence(options):\\n    chemical_indicators = ['new_substance_formed', 'combustion', 'oxidation', 'energy_as_light_from_reaction']\\n    \\n    for option in options:\\n        if option == 'magnesium_burning':\\n            has_combustion = True\\n            produces_new_substance = True\\n            releases_light = True\\n            if has_combustion and produces_new_substance and releases_light:\\n                return option\\n        elif option == 'water_evaporation':\\n            is_phase_change = True\\n            if is_phase_change:\\n                continue\\n        elif option == 'soft_drink_fizzing':\\n            is_gas_escaping = True\\n            if is_gas_escaping:\\n                continue\\n        elif option == 'light_bulb_heat':\\n            is_electrical_resistance = True\\n            if is_electrical_resistance:\\n                continue\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 8,\n    \"variable_count\": 10\n}"}
{"qid": 167, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that pomegranates are edible fruits containing seeds (arils) with juice and nutrients like vitamin C, potassium, and antioxidants\",\n        \"Understand that consuming pomegranate follows normal digestive processes where nutrients are absorbed in the small intestine\",\n        \"Identify that the question tests for mythological misconceptions (Persephone myth) versus biological facts about fruit consumption\",\n        \"Determine that eating pomegranate has no special effects beyond standard nutritional benefits from consuming fruit\"\n    ],\n    \"pseudocode\": \"def analyze_pomegranate_consumption(fruit):\\n    nutritional_content = extract_nutrients(fruit)\\n    digestive_outcome = process_through_digestive_system(nutritional_content)\\n    mythological_effects = check_supernatural_consequences(fruit)\\n    if mythological_effects == None:\\n        return digestive_outcome\\n    else:\\n        return digestive_outcome\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 4\n}"}
{"qid": 168, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about Hitler's central message before the war, which requires locating this specific information in the text.\",\n        \"Scan the text for explicit statements about Hitler's 'central message' and find Andrew Roberts' quote stating 'appeasement was his central message until the outbreak of war.'\",\n        \"Extract the key term 'appeasement' as the answer, which refers to Hitler's strategy of promoting peaceful relations to prevent Western opposition to his plans.\"\n    ],\n    \"pseudocode\": \"def find_central_message(text, question):\\n    sentences = split_into_sentences(text)\\n    target_phrase = \\\"central message\\\"\\n    \\n    for sentence in sentences:\\n        if target_phrase in sentence and \\\"before\\\" in question:\\n            words = extract_words(sentence)\\n            for i in range(len(words)):\\n                if words[i] == \\\"appeasement\\\":\\n                    return words[i]\\n    \\n    return None\",\n    \"loop_count\": 2,\n    \"branch_count\": 2,\n    \"variable_count\": 6\n}"}
{"qid": 169, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the common myth that touching a baby bird causes maternal rejection due to human scent transfer\",\n        \"Recognize that most bird species have a poor sense of smell and rely primarily on visual and auditory cues to identify their offspring\",\n        \"Consider the actual potential consequences of human contact: physical injury to fragile bones, stress response in the bird, or attracting predators through disturbance\",\n        \"Determine that the scientifically accurate answer contradicts the widespread misconception about scent-based rejection\"\n    ],\n    \"pseudocode\": \"def evaluate_baby_bird_contact_consequences():\\n    bird_smell_capability = \\\"poor\\\"\\n    maternal_recognition_method = \\\"visual_and_auditory\\\"\\n    human_scent_causes_rejection = False\\n    \\n    potential_consequences = []\\n    \\n    if bird_smell_capability == \\\"poor\\\":\\n        human_scent_causes_rejection = False\\n    \\n    if human_contact_occurs:\\n        potential_consequences.append(\\\"possible_injury\\\")\\n        potential_consequences.append(\\\"stress_response\\\")\\n        potential_consequences.append(\\\"predator_attraction\\\")\\n    \\n    if not human_scent_causes_rejection:\\n        return \\\"Nothing in particular happens regarding maternal rejection\\\"\\n    else:\\n        return \\\"Mother will reject baby\\\"\\n\",\n    \"loop_count\": 0,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 170, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of 'Mumbai' and 'embracing' to locate the relevant information\",\n        \"Identify that the text states 'modern Mumbai has embraced western consumerism' in the fifth paragraph\",\n        \"Extract the object of the verb 'embraced' which is 'western consumerism'\",\n        \"Note that the text also mentions 'Mumbai is fearlessly embracing modernity' but the question asks what Mumbai is embracing, and the more specific answer is western consumerism\"\n    ],\n    \"pseudocode\": \"def find_what_mumbai_embraces(text):\\n    sentences = split_into_sentences(text)\\n    target_phrase = None\\n    \\n    for sentence in sentences:\\n        if contains_mumbai_and_embrace(sentence):\\n            words = tokenize(sentence)\\n            for i in range(len(words)):\\n                if words[i] == \\\"embraced\\\" or words[i] == \\\"embracing\\\":\\n                    if i > 0 and (words[i-1] == \\\"Mumbai\\\" or words[i-1] == \\\"has\\\"):\\n                        target_phrase = extract_object_phrase(words, i)\\n                        break\\n            if target_phrase:\\n                break\\n    \\n    return target_phrase\\n\\ndef contains_mumbai_and_embrace(sentence):\\n    return \\\"Mumbai\\\" in sentence and (\\\"embrac\\\" in sentence)\\n\\ndef extract_object_phrase(words, verb_index):\\n    phrase = []\\n    i = verb_index + 1\\n    while i < len(words) and words[i] != \\\".\\\":\\n        phrase.append(words[i])\\n        i = i + 1\\n    return join_words(phrase)\",\n    \"pred_loop_count\": 3,\n    \"pred_branch_count\": 5,\n    \"pred_variable_count\": 8\n}"}
{"qid": 171, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about what the Taliban issued, which requires locating the specific document mentioned in the text.\",\n        \"Scan the text for references to Taliban-issued documents, noting that the article begins with 'A new Taliban military \\\"code of conduct\\\"' in the first sentence.\",\n        \"Confirm that this code of conduct is the central document discussed throughout the article, with details about its contents including restrictions on suicide attacks and treatment of civilians.\",\n        \"Verify that the text explicitly states 'The booklet, obtained by CNN in northwestern Pakistan' referring to this same code of conduct document.\"\n    ],\n    \"pseudocode\": \"def find_taliban_document(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_taliban_reference(sentence) and contains_document_type(sentence):\\n            document = extract_document_name(sentence)\\n            return document\\n    return None\\n\\ndef contains_taliban_reference(sentence):\\n    taliban_keywords = ['Taliban', 'taliban']\\n    for keyword in taliban_keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef contains_document_type(sentence):\\n    document_keywords = ['code of conduct', 'booklet', 'document', 'issued']\\n    for keyword in document_keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef extract_document_name(sentence):\\n    if 'code of conduct' in sentence:\\n        return 'new code of conduct'\\n    return None\",\n    \"loop_count\": 3,\n    \"branch_count\": 5,\n    \"variable_count\": 7\n}"}
{"qid": 172, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks about the content of a video mentioned in the text\",\n        \"Locate the reference to 'Internet footage' in the second paragraph which describes what the video showed\",\n        \"Extract the specific description: 'Internet footage of the Lufthansa A320 as it attempts a landing Saturday at Hamburg, Germany'\",\n        \"Note that additional details about the video content appear later: 'Dramatic amateur video of the incident that appeared on the Internet showed the Airbus A320 teetering as it tried to land'\"\n    ],\n    \"pseudocode\": \"def find_video_content(text):\\n    sentences = split_into_sentences(text)\\n    video_description = \\\"\\\"\\n    for sentence in sentences:\\n        if contains_video_reference(sentence):\\n            video_description = extract_video_content(sentence)\\n            break\\n    return video_description\\n\\ndef contains_video_reference(sentence):\\n    video_keywords = [\\\"footage\\\", \\\"video\\\", \\\"recording\\\"]\\n    for keyword in video_keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef extract_video_content(sentence):\\n    if \\\"Internet footage of\\\" in sentence:\\n        start = sentence.index(\\\"Internet footage of\\\") + 19\\n        end = find_description_end(sentence, start)\\n        return sentence[start:end]\\n    return sentence\",\n    \"loop_count\": 2,\n    \"branch_count\": 3,\n    \"variable_count\": 8\n}"}
{"qid": 173, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that earthquakes occur due to tectonic plate movements along fault lines, which is fundamental to plate tectonics theory.\",\n        \"Recall that the distribution of earthquake epicenters worldwide traces the boundaries of tectonic plates, providing evidence for continental drift.\",\n        \"Apply the principle that seismic wave analysis from earthquakes reveals Earth's internal structure and confirms that plates move over the asthenosphere.\",\n        \"Evaluate each choice against the established connection between earthquakes and plate tectonics to identify which statement earthquakes directly support.\"\n    ],\n    \"pseudocode\": \"def analyze_earthquake_evidence(choices):\\n    plate_tectonics_evidence = True\\n    earthquake_data_supports_movement = True\\n    \\n    for choice in choices:\\n        if choice == \\\"continents_moving\\\":\\n            if plate_tectonics_evidence and earthquake_data_supports_movement:\\n                return choice\\n        elif choice == \\\"climate_change\\\":\\n            supported = False\\n        elif choice == \\\"dinosaur_extinction\\\":\\n            supported = False\\n        elif choice == \\\"ocean_depth\\\":\\n            supported = False\\n    \\n    return selected_choice\",\n    \"loop_count\": 1,\n    \"branch_count\": 5,\n    \"variable_count\": 6\n}"}
{"qid": 174, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the question asks for the location of rooftop dwellings in Hong Kong\",\n        \"Scan the text for geographical references related to where these sky slums are concentrated\",\n        \"Locate the specific passage that states 'Mostly found in old urban areas in Kowloon -- Sham Shui Po, Kwun Tung and Tai Kok Tsui'\",\n        \"Extract the main geographical area mentioned before the specific district names\"\n    ],\n    \"pseudocode\": \"def find_rooftop_dwelling_locations(text):\\n    sentences = split_text_into_sentences(text)\\n    location_info = []\\n    \\n    for sentence in sentences:\\n        if contains_location_keywords(sentence):\\n            if contains_rooftop_dwelling_reference(sentence):\\n                location_info.append(sentence)\\n    \\n    for info in location_info:\\n        if contains_phrase('mostly found', info):\\n            location = extract_main_location(info)\\n            return location\\n    \\n    return None\\n\\ndef contains_location_keywords(sentence):\\n    keywords = ['found', 'located', 'areas', 'Kowloon', 'Hong Kong']\\n    for keyword in keywords:\\n        if keyword in sentence:\\n            return True\\n    return False\\n\\ndef contains_rooftop_dwelling_reference(sentence):\\n    dwelling_terms = ['rooftop', 'dwellers', 'houses', 'slums']\\n    for term in dwelling_terms:\\n        if term in sentence:\\n            return True\\n    return False\\n\\ndef extract_main_location(info):\\n    start_index = find_phrase_index('mostly found in', info)\\n    end_index = find_delimiter_index('--', info)\\n    location = substring(info, start_index + 15, end_index - 1)\\n    return location\",\n    \"loop_count\": 4,\n    \"branch_count\": 6,\n    \"variable_count\": 11\n}"}
{"qid": 175, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that the question asks about a specific Gandhi quote regarding changing the world\",\n        \"Identify that the commonly misattributed quote 'Be the change you want to see in the world' is actually not something Gandhi said\",\n        \"Retrieve Gandhi's actual documented statements about change, which emphasize that personal transformation leads to changes in how the world responds\",\n        \"Return the authentic Gandhi quotes that convey his philosophy about the relationship between self-change and world change\"\n    ],\n    \"pseudocode\": \"def get_gandhi_quote_about_change():\\n    misattributed_quote = \\\"Be the change you want to see in the world\\\"\\n    actual_quotes = [\\\"If we could change ourselves, the tendencies in the world would also change\\\",\\n                     \\\"As a man changes his own nature, so does the attitude of the world change towards him\\\"]\\n    correct_answer = actual_quotes[0]\\n    return correct_answer\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 3\n}"}
{"qid": 176, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that this is a historical attribution question requiring identification of the true source of the quote 'Let them eat cake'\",\n        \"Recall that Jean-Jacques Rousseau wrote in his autobiography 'Confessions' (written 1765-1769) about a 'great princess' who said this phrase when told peasants had no bread\",\n        \"Note that Rousseau's autobiography predates Marie Antoinette becoming Queen of France (1774), making her attribution historically impossible\",\n        \"Identify that historians suggest the princess Rousseau referenced was likely Maria Theresa of Spain, Louis XIV's wife, though the attribution remains uncertain\"\n    ],\n    \"pseudocode\": \"def identify_cake_quote_source():\\n    rousseau_confessions_date = 1765\\n    marie_antoinette_queen_date = 1774\\n    \\n    if rousseau_confessions_date < marie_antoinette_queen_date:\\n        attribution_possible = False\\n    else:\\n        attribution_possible = True\\n    \\n    if not attribution_possible:\\n        likely_sources = ['Maria Theresa of Spain', 'unnamed princess']\\n        return 'Rousseau attributed to princess, possibly ' + likely_sources[0]\\n    \\n    return 'Attribution unclear'\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 4\n}"}
{"qid": 177, "response": "{\n    \"reasoning_steps\": [\n        \"Identify traits that are genuinely unique to humans by examining cognitive abilities that no other species has demonstrated\",\n        \"Check if the trait involves mastery of human language systems with full grammar and abstract concepts, which only humans achieve\",\n        \"Verify if the trait involves mathematical reasoning and proof construction, which requires symbolic manipulation unique to humans\",\n        \"Determine if the trait involves discovering and formalizing physical laws through scientific method, a uniquely human achievement\",\n        \"Confirm if the trait involves engineering complex machines like spaceships, requiring advanced planning and technology only humans possess\"\n    ],\n    \"pseudocode\": \"def identify_unique_human_trait(trait):\\n    unique_traits = [\\\"master human languages\\\", \\\"prove mathematical theorems\\\", \\\"discover physical laws\\\", \\\"build spaceships\\\"]\\n    \\n    for unique in unique_traits:\\n        if trait contains unique:\\n            return True\\n    \\n    non_unique = [\\\"talk\\\", \\\"learn language\\\", \\\"make art\\\", \\\"play\\\", \\\"use tools\\\"]\\n    \\n    for common in non_unique:\\n        if trait contains common:\\n            return False\\n    \\n    return False\",\n    \"loop_count\": 2,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 178, "response": "{\n    \"reasoning_steps\": [\n        \"Recall the conversion factor: 1 yard = 3 feet\",\n        \"To convert cubic yards to cubic feet, cube both sides of the linear conversion: (1 yard)\u00b3 = (3 feet)\u00b3\",\n        \"Calculate that 1 cubic yard = 27 cubic feet\",\n        \"Multiply by 3 to find the volume of 3 cubic yards in cubic feet\"\n    ],\n    \"pseudocode\": \"def cubic_yards_to_cubic_feet(cubic_yards):\\n    feet_per_yard = 3\\n    cubic_feet_per_cubic_yard = feet_per_yard * feet_per_yard * feet_per_yard\\n    result = cubic_yards * cubic_feet_per_cubic_yard\\n    return result\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 4\n}"}
{"qid": 179, "response": "{\n    \"reasoning_steps\": [\n        \"Since the three angles around P sum to 360\u00b0 and are equal, each angle APB = BPC = CPA = 120\u00b0.\",\n        \"Apply the Law of Cosines to triangle APB with PA = 10, PB = 6, and angle APB = 120\u00b0 to find AB\u00b2 = PA\u00b2 + PB\u00b2 - 2\u00b7PA\u00b7PB\u00b7cos(120\u00b0) = 100 + 36 - 2\u00b710\u00b76\u00b7(-1/2) = 196.\",\n        \"Apply the Law of Cosines to triangle BPC with PB = 6, PC = z (unknown), and angle BPC = 120\u00b0 to find BC\u00b2 = PB\u00b2 + PC\u00b2 - 2\u00b7PB\u00b7PC\u00b7cos(120\u00b0) = 36 + z\u00b2 - 2\u00b76\u00b7z\u00b7(-1/2) = z\u00b2 + 6z + 36.\",\n        \"Apply the Law of Cosines to triangle APC with PA = 10, PC = z, and angle CPA = 120\u00b0 to find AC\u00b2 = PA\u00b2 + PC\u00b2 - 2\u00b7PA\u00b7PC\u00b7cos(120\u00b0) = 100 + z\u00b2 - 2\u00b710\u00b7z\u00b7(-1/2) = z\u00b2 + 10z + 100.\",\n        \"Since triangle ABC has a right angle at B, apply the Pythagorean theorem: AB\u00b2 + BC\u00b2 = AC\u00b2, which gives 196 + z\u00b2 + 6z + 36 = z\u00b2 + 10z + 100.\",\n        \"Simplify the equation by canceling z\u00b2 from both sides and solving for z: 232 + 6z = 10z + 100, which yields 4z = 132, so z = 33.\"\n    ],\n    \"pseudocode\": \"def find_PC():\\n    PA = 10\\n    PB = 6\\n    angle = 120\\n    cos_angle = -0.5\\n    \\n    AB_squared = PA * PA + PB * PB - 2 * PA * PB * cos_angle\\n    \\n    z = 0\\n    BC_squared = PB * PB + z * z - 2 * PB * z * cos_angle\\n    AC_squared = PA * PA + z * z - 2 * PA * z * cos_angle\\n    \\n    BC_squared_expanded = z * z + 6 * z + 36\\n    AC_squared_expanded = z * z + 10 * z + 100\\n    \\n    left_side = AB_squared + BC_squared_expanded\\n    right_side = AC_squared_expanded\\n    \\n    z_solution = (AB_squared + 36 - 100) / (10 - 6)\\n    \\n    return z_solution\",\n    \"pred_loop_count\": 0,\n    \"pred_branch_count\": 0,\n    \"pred_variable_count\": 12\n}"}
{"qid": 180, "response": "{\n    \"reasoning_steps\": [\n        \"Expand h(x) = (x^{-1/2} + 2x)(7 - x^{-1}) using the distributive property to get h(x) = 7x^{-1/2} - x^{-3/2} + 14x - 2\",\n        \"Apply the power rule d/dx(x^n) = nx^{n-1} to each term: d/dx(7x^{-1/2}) = 7(-1/2)x^{-3/2}, d/dx(-x^{-3/2}) = -(-3/2)x^{-5/2}, d/dx(14x) = 14, d/dx(-2) = 0\",\n        \"Simplify the derivative to get h'(x) = -7/2 x^{-3/2} + 3/2 x^{-5/2} + 14\",\n        \"Substitute x = 4 into h'(x) and evaluate: h'(4) = -7/2 * 4^{-3/2} + 3/2 * 4^{-5/2} + 14\",\n        \"Calculate 4^{-3/2} = 1/8 and 4^{-5/2} = 1/32, then compute h'(4) = -7/2 * 1/8 + 3/2 * 1/32 + 14 = -7/16 + 3/64 + 14\"\n    ],\n    \"pseudocode\": \"def calculate_h_prime_at_4():\\n    x = 4\\n    term1 = -7/2 * (x ** (-3/2))\\n    term2 = 3/2 * (x ** (-5/2))\\n    term3 = 14\\n    h_prime = term1 + term2 + term3\\n    return h_prime\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 6\n}"}
{"qid": 181, "response": "{\n    \"reasoning_steps\": [\n        \"Identify which protists reproduce sexually by forming zygotes - among common pond protists, volvox is colonial and reproduces both asexually and sexually through zygote formation\",\n        \"Recall that amoeba reproduces primarily by binary fission, euglena reproduces by longitudinal binary fission, and paramecium reproduces by binary fission and conjugation without forming visible zygotes\",\n        \"Volvox forms specialized reproductive cells called gonidia that produce gametes, which fuse to form zygotes with thick protective walls\",\n        \"Compare each protist option against the characteristic of producing identifiable zygote structures in pond water samples\"\n    ],\n    \"pseudocode\": \"def identify_zygote_producing_protist(protist_options):\\n    zygote_producers = {}\\n    zygote_producers['amoeba'] = False\\n    zygote_producers['euglena'] = False\\n    zygote_producers['paramecium'] = False\\n    zygote_producers['volvox'] = True\\n    \\n    for protist in protist_options:\\n        if zygote_producers[protist] == True:\\n            return protist\\n    \\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 182, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that balanced forces occur when the net force on an object is zero, resulting in no acceleration according to Newton's First Law.\",\n        \"Analyze each scenario to determine if forces are balanced: a car increasing speed has unbalanced forces (net force causes acceleration), a parked bus has balanced forces (gravity and normal force cancel), a kicked ball experiences unbalanced forces (friction opposes motion), and a roller coaster slowing down has unbalanced forces (gravity component and friction cause deceleration).\",\n        \"Identify that only the stationary bus has zero net force, with upward normal force from the ground exactly balancing downward gravitational force.\"\n    ],\n    \"pseudocode\": \"def find_balanced_forces_example(scenarios):\\n    balanced_examples = []\\n    for scenario in scenarios:\\n        net_force = calculate_net_force(scenario)\\n        if net_force == 0:\\n            balanced_examples.append(scenario)\\n    return balanced_examples\\n\\ndef calculate_net_force(scenario):\\n    if scenario.is_accelerating or scenario.is_decelerating:\\n        return 1\\n    elif scenario.is_stationary:\\n        return 0\\n    else:\\n        return 1\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 4\n}"}
{"qid": 183, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that a set is convex if for any two points in the set, the line segment connecting them is also in the set\",\n        \"For any two points x1, x2 in S_a, we have dist(x1, S) \u2264 a and dist(x2, S) \u2264 a\",\n        \"Consider any point z on the line segment between x1 and x2, where z = \u03bbx1 + (1-\u03bb)x2 for \u03bb \u2208 [0,1]\",\n        \"Since S is convex and distance function is convex, we can show dist(z, S) \u2264 \u03bb\u00b7dist(x1, S) + (1-\u03bb)\u00b7dist(x2, S) \u2264 a\",\n        \"Therefore, z \u2208 S_a, proving S_a is convex\"\n    ],\n    \"pseudocode\": \"def is_S_a_convex(S_is_convex):\\n    if S_is_convex:\\n        return 1\\n    else:\\n        return 0\",\n    \"loop_count\": 0,\n    \"branch_count\": 2,\n    \"variable_count\": 1\n}"}
{"qid": 184, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific quote from Rick Perry about Turkey's rulers in the text\",\n        \"Locate the passage where Perry's statement about Turkish leadership is mentioned\",\n        \"Extract the exact phrase Perry used to describe how Turkey is being ruled\"\n    ],\n    \"pseudocode\": \"def find_perry_statement_about_turkey_rulers(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_perry_and_turkey_and_ruled(sentence):\\n            quote_start = find_quote_start(sentence)\\n            quote_end = find_quote_end(sentence, quote_start)\\n            return extract_substring(sentence, quote_start, quote_end)\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 5\n}"}
{"qid": 185, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific time reference in the text that indicates when inspections began\",\n        \"Locate the sentence containing temporal information about the start of inspections\",\n        \"Extract the day of the week mentioned as the inspection start date\"\n    ],\n    \"pseudocode\": \"def find_inspection_start_date(text):\\n    sentences = split_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_inspection_start_info(sentence):\\n            day = extract_day_of_week(sentence)\\n            if day is not None:\\n                return day\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 4\n}"}
{"qid": 186, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that chopstick placement is a cultural etiquette question with varying interpretations across different Asian cultures\",\n        \"Identify that vertical chopsticks resemble incense sticks used in funeral rituals and ancestor worship in many East Asian cultures\",\n        \"Determine that the physical act itself causes no supernatural effects, but may violate social norms in certain cultural contexts\",\n        \"Classify responses based on whether they claim supernatural consequences versus cultural interpretations\"\n    ],\n    \"pseudocode\": \"def analyze_chopstick_placement(placement_type):\\n    cultural_contexts = ['Japanese', 'Chinese', 'Korean', 'Vietnamese']\\n    supernatural_effects = []\\n    cultural_violations = []\\n    \\n    if placement_type == 'vertical':\\n        for culture in cultural_contexts:\\n            if resembles_funeral_incense(culture):\\n                cultural_violations.append(culture)\\n    \\n    if len(supernatural_effects) == 0:\\n        result = 'no_supernatural_consequences'\\n    \\n    if len(cultural_violations) > 0:\\n        result = result + '_but_cultural_taboo'\\n    \\n    return result\",\n    \"loop_count\": 1,\n    \"branch_count\": 3,\n    \"variable_count\": 6\n}"}
{"qid": 187, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that Barack Obama was born in Honolulu, Hawaii on August 4, 1961, as documented by his official birth certificate\",\n        \"Establish that Hawaii became the 50th U.S. state on August 21, 1959, making it a U.S. state at the time of Obama's birth\",\n        \"Verify the birthplace by checking if the input location matches 'United States' or 'U.S.' or 'Hawaii'\",\n        \"Return confirmation that Barack Obama was born in the United States based on the historical fact\"\n    ],\n    \"pseudocode\": \"def determine_obama_birthplace(query):\\n    obama_birth_location = \\\"Hawaii\\\"\\n    obama_birth_country = \\\"United States\\\"\\n    valid_answers = [\\\"U.S.\\\", \\\"United States\\\", \\\"USA\\\", \\\"Hawaii\\\"]\\n    \\n    if query == \\\"birth_country\\\":\\n        return obama_birth_country\\n    elif query == \\\"birth_state\\\":\\n        return obama_birth_location\\n    else:\\n        for answer in valid_answers:\\n            if answer in query:\\n                return True\\n        return False\",\n    \"loop_count\": 1,\n    \"branch_count\": 4,\n    \"variable_count\": 5\n}"}
{"qid": 188, "response": "{\n    \"reasoning_steps\": [\n        \"Recall that a function f is even if f(-x) = f(x) for all x in its domain, and odd if f(-x) = -f(x) for all x in its domain.\",\n        \"To determine if f(x) = 3^(x\u00b2-3) - |x| is even or odd, compute f(-x) by substituting -x for x in the expression.\",\n        \"Evaluate f(-x): Since (-x)\u00b2 = x\u00b2 and |-x| = |x|, we get f(-x) = 3^(x\u00b2-3) - |x|.\",\n        \"Compare f(-x) with f(x): Since f(-x) = 3^(x\u00b2-3) - |x| = f(x), the function satisfies the definition of an even function.\"\n    ],\n    \"pseudocode\": \"def determine_function_type(x):\\n    f_x = 3^(x^2 - 3) - abs(x)\\n    f_neg_x = 3^((-x)^2 - 3) - abs(-x)\\n    \\n    if f_x == f_neg_x:\\n        result = \\\"even\\\"\\n    elif f_neg_x == -f_x:\\n        result = \\\"odd\\\"\\n    else:\\n        result = \\\"neither\\\"\\n    \\n    return result\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 4\n}"}
{"qid": 189, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that with m = 2^n elements and perfect binary questions, we need exactly n questions to uniquely identify X, since each question eliminates half the possibilities.\",\n        \"With n + \u221an questions, we have \u221an extra questions beyond the minimum required, which provides redundancy against errors.\",\n        \"Define the error event as having more than one element remaining after all questions, which occurs when some element other than X is consistent with all answers.\",\n        \"For any wrong element y \u2260 X, the probability it remains is (1/2)^(n+\u221an) since it must accidentally match X's answer on all n + \u221an independent questions.\",\n        \"Apply linearity of expectation to find E[number of wrong elements remaining] = (m-1) \u00d7 (1/2)^(n+\u221an) = (2^n - 1) \u00d7 2^(-n-\u221an).\",\n        \"Simplify the expected value: E[wrong elements] = (2^n - 1) \u00d7 2^(-n) \u00d7 2^(-\u221an) \u2248 2^(-\u221an) for large n.\",\n        \"Apply Markov's inequality: P(error) = P(wrong elements \u2265 1) \u2264 E[wrong elements]/1 = 2^(-\u221an).\",\n        \"As n \u2192 \u221e, we have \u221an \u2192 \u221e, so 2^(-\u221an) \u2192 0, giving probability of error \u2192 0.\"\n    ],\n    \"pseudocode\": \"def compute_error_probability(n):\\n    m = 2 ** n\\n    num_questions = n + sqrt(n)\\n    prob_single_wrong_remains = (1/2) ** num_questions\\n    expected_wrong_elements = (m - 1) * prob_single_wrong_remains\\n    expected_wrong_elements = (2**n - 1) * (2**(-n)) * (2**(-sqrt(n)))\\n    expected_wrong_elements = 2**(-sqrt(n))\\n    error_probability_bound = expected_wrong_elements\\n    if n == infinity:\\n        return 0.0\\n    return error_probability_bound\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 6\n}"}
{"qid": 190, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that UFO stands for Unidentified Flying Object, which by definition means the object's origin is unknown\",\n        \"Acknowledge the scientific consensus that no UFO has been conclusively proven to have extraterrestrial origins through peer-reviewed evidence\",\n        \"Iterate through any list of famous UFO cases and verify that each lacks definitive scientific proof of alien origin\",\n        \"Return a statement reflecting that no UFO meets the criteria of being scientifically demonstrated as extraterrestrial\"\n    ],\n    \"pseudocode\": \"def find_extraterrestrial_ufo(ufo_cases):\\n    verified_alien_ufos = []\\n    for case in ufo_cases:\\n        has_scientific_proof = False\\n        peer_reviewed = False\\n        if has_scientific_proof and peer_reviewed:\\n            verified_alien_ufos.append(case)\\n    if len(verified_alien_ufos) == 0:\\n        return \\\"No UFO has been scientifically demonstrated to be extraterrestrial\\\"\\n    return verified_alien_ufos\",\n    \"loop_count\": 1,\n    \"branch_count\": 2,\n    \"variable_count\": 5\n}"}
{"qid": 191, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that California law permits corporal punishment of children by parents as long as it falls within reasonable discipline and does not cause injury\",\n        \"Check if the physical discipline exceeds the threshold of reasonable punishment by evaluating factors like severity, marks left, and age-appropriateness\",\n        \"Return true if the discipline is within legal bounds (not excessive), false if it crosses into abuse territory\"\n    ],\n    \"pseudocode\": \"def is_hitting_allowed_in_california(punishment_severity, causes_injury):\\n    if punishment_severity <= REASONABLE_THRESHOLD and not causes_injury:\\n        return True\\n    else:\\n        return False\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 192, "response": "{\n    \"reasoning_steps\": [\n        \"Scan the text for mentions of who Rachel Motte listened to as a child\",\n        \"Identify the specific passage where she states 'Rush was an integral part of my childhood. I must have been 6 or 7 when I started listening in the late 1980s'\",\n        \"Extract the name 'Rush Limbaugh' as the person she listened to, which is confirmed throughout the text\"\n    ],\n    \"pseudocode\": \"def find_who_rachel_listened_to(text):\\n    sentences = split_text_into_sentences(text)\\n    for sentence in sentences:\\n        if contains_phrase(sentence, \\\"I started listening\\\") or contains_phrase(sentence, \\\"Rush was an integral part\\\"):\\n            return \\\"Rush Limbaugh\\\"\\n    return None\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 193, "response": "{\n    \"reasoning_steps\": [\n        \"Identify the specific section in the text that mentions Obama's Asia trip and its purposes\",\n        \"Extract the stated reasons for the trip from the first paragraph under 'First Up: Executive Agenda'\",\n        \"Note that the text explicitly mentions 'to meet with world leaders and to take part in an economic conference' as the purposes of the nine-day trip\"\n    ],\n    \"pseudocode\": \"def find_obama_asia_activities(text):\\n    activities = []\\n    sections = split_by_topic(text)\\n    for section in sections:\\n        if contains_asia_trip_info(section):\\n            trip_purposes = extract_trip_purposes(section)\\n            for purpose in trip_purposes:\\n                activities.append(purpose)\\n    return activities\\n\\ndef contains_asia_trip_info(section):\\n    keywords = ['Asia', 'trip', 'Obama']\\n    for keyword in keywords:\\n        if keyword not in section:\\n            return False\\n    return True\\n\\ndef extract_trip_purposes(section):\\n    purposes = []\\n    sentences = split_into_sentences(section)\\n    for sentence in sentences:\\n        if 'to meet' in sentence or 'to take part' in sentence:\\n            purpose = extract_purpose_phrase(sentence)\\n            purposes.append(purpose)\\n    return purposes\",\n    \"loop_count\": 4,\n    \"branch_count\": 3,\n    \"variable_count\": 10\n}"}
{"qid": 194, "response": "{\n    \"reasoning_steps\": [\n        \"Identify all forces acting on the ladder system: Lancelot's weight (800 N), ladder's weight (180 N), normal force from the wall (horizontal), and contact force at the base (with horizontal and vertical components).\",\n        \"Apply the equilibrium condition for torques about the base of the ladder, noting that the wall force acts at the top, Lancelot's weight acts at L/3 from the base, and the ladder's weight acts at L/2 from the base.\",\n        \"Since the wall is frictionless, it can only exert a horizontal normal force perpendicular to its surface.\",\n        \"Apply the equilibrium condition for forces in both horizontal and vertical directions to find the components of the base contact force.\",\n        \"Calculate the magnitude of the base contact force using the Pythagorean theorem from its horizontal and vertical components.\"\n    ],\n    \"pseudocode\": \"def calculate_base_contact_force(lancelot_weight, ladder_weight, ladder_length, angle, lancelot_position_fraction):\\n    L = ladder_length\\n    W_lancelot = lancelot_weight\\n    W_ladder = ladder_weight\\n    \\n    sum_torques = 0\\n    sum_torques = sum_torques + W_lancelot * (L/3) * cos(angle)\\n    sum_torques = sum_torques + W_ladder * (L/2) * cos(angle)\\n    sum_torques = sum_torques - N_wall * L * sin(angle)\\n    \\n    N_wall = (W_lancelot * (L/3) * cos(angle) + W_ladder * (L/2) * cos(angle)) / (L * sin(angle))\\n    \\n    F_base_horizontal = N_wall\\n    F_base_vertical = W_lancelot + W_ladder\\n    \\n    F_base_magnitude = sqrt(F_base_horizontal^2 + F_base_vertical^2)\\n    \\n    return F_base_magnitude\",\n    \"loop_count\": 0,\n    \"branch_count\": 0,\n    \"variable_count\": 9\n}"}
{"qid": 195, "response": "{\n    \"reasoning_steps\": [\n        \"Identify that the graph shows y = a sin(bx + c) with amplitude a = 2, since the function oscillates between -2 and 2.\",\n        \"Observe that the function reaches its maximum value of 2 at x = 0, meaning sin(b\u00b70 + c) = 1.\",\n        \"Recall that sin(\u03b8) = 1 when \u03b8 = \u03c0/2 + 2\u03c0k for integer k, so we need b\u00b70 + c = \u03c0/2 + 2\u03c0k.\",\n        \"Since we want the smallest positive c, and b\u00b70 + c = c, we get c = \u03c0/2 when k = 0.\"\n    ],\n    \"pseudocode\": \"def find_smallest_c():\\n    amplitude = 2\\n    max_at_x = 0\\n    \\n    phase_shift = 0\\n    while True:\\n        if sin(phase_shift) == 1:\\n            return phase_shift\\n        phase_shift = phase_shift + pi/2\",\n    \"loop_count\": 1,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 196, "response": "{\n    \"reasoning_steps\": [\n        \"From the recurrence relation x_n * x_{n+1} = n, derive that x_{n+1} * x_{n+2} = n+1, which gives us x_{n+2}/x_n = (n+1)/n\",\n        \"Since x_{n+2}/x_n = (n+1)/n for all n\u22651, we can express x_{2k} in terms of x_2 and x_{2k+1} in terms of x_1 for large k\",\n        \"Using the limit condition lim(x_n/x_{n+1}) = 1 and the fact that x_n * x_{n+1} = n, we get lim(x_n^2) = lim(n) as n approaches infinity\",\n        \"For even n=2k, x_{2k} ~ sqrt(2k) and for odd n=2k+1, x_{2k+1} ~ sqrt(2k+1) as k approaches infinity\",\n        \"From x_1 * x_2 = 1 and the asymptotic behavior, we can determine that x_1 = sqrt(2/\u03c0) by matching the growth rates\",\n        \"Calculate \u03c0 * x_1^2 = \u03c0 * (2/\u03c0) = 2\"\n    ],\n    \"pseudocode\": \"def calculate_pi_x1_squared():\\n    ratio_even = 1\\n    ratio_odd = 1\\n    \\n    for k in range(1, 1000):\\n        ratio_even = ratio_even * (k + 1) / k\\n        ratio_odd = ratio_odd * (k + 1) / k\\n    \\n    x2_over_x0 = ratio_even\\n    x3_over_x1 = ratio_odd\\n    \\n    x1_squared = 2 / 3.14159265359\\n    result = 3.14159265359 * x1_squared\\n    \\n    return result\",\n    \"loop_count\": 1,\n    \"branch_count\": 0,\n    \"variable_count\": 7\n}"}
{"qid": 197, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that past performance in financial markets does not guarantee future results - this is a fundamental principle in economics and investing.\",\n        \"Consider that property values are influenced by multiple unpredictable factors including economic cycles, interest rates, demographics, and government policies.\",\n        \"Evaluate the three possible outcomes for future property values: they could increase, decrease, or remain stable.\",\n        \"Return a statement acknowledging the uncertainty of future property value movements based on economic principles.\"\n    ],\n    \"pseudocode\": \"def predict_future_property_values(past_trend):\\n    economic_principle = \\\"past_performance_not_indicative_of_future\\\"\\n    possible_outcomes = [\\\"rise\\\", \\\"fall\\\", \\\"stay_same\\\"]\\n    \\n    if economic_principle == \\\"past_performance_not_indicative_of_future\\\":\\n        prediction = \\\"Property could either rise or fall in value\\\"\\n    \\n    return prediction\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 3\n}"}
{"qid": 198, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that Australia was colonized by the British Empire in 1788, establishing English as the primary language\",\n        \"Note that unlike Wales which has its own Celtic language (Welsh), Australia does not have a unique national language called 'Australian'\",\n        \"Confirm that English remains the de facto national language of Australia, spoken by approximately 72% of the population as their only language at home\"\n    ],\n    \"pseudocode\": \"def determine_australian_language(country):\\n    colonial_languages = {'Australia': 'English', 'USA': 'English', 'Brazil': 'Portuguese'}\\n    if country in colonial_languages:\\n        return colonial_languages[country]\\n    else:\\n        return 'Unknown'\",\n    \"loop_count\": 0,\n    \"branch_count\": 1,\n    \"variable_count\": 2\n}"}
{"qid": 199, "response": "{\n    \"reasoning_steps\": [\n        \"Initialize the Birge-Vieta method with polynomial coefficients [1, 0, 0, 0, -1, 1] for x^5 - x + 1 and initial guess p = -1.5\",\n        \"Apply the Birge-Vieta recurrence relations: b[0] = a[0], b[i] = a[i] + p*b[i-1] to compute polynomial value at p\",\n        \"Compute the derivative value using c[0] = b[0], c[i] = b[i] + p*c[i-1] for i from 1 to n-1\",\n        \"Update the root approximation using Newton's method: p_new = p - b[n]/c[n-1]\",\n        \"Iterate until |p_new - p| < 0.0005 to ensure three decimal place accuracy\"\n    ],\n    \"pseudocode\": \"def birge_vieta_root():\\n    a = [1, 0, 0, 0, -1, 1]\\n    p = -1.5\\n    tolerance = 0.0005\\n    \\n    while True:\\n        n = 5\\n        b = [0] * 6\\n        c = [0] * 5\\n        \\n        b[0] = a[0]\\n        for i in range(1, n + 1):\\n            b[i] = a[i] + p * b[i - 1]\\n        \\n        c[0] = b[0]\\n        for i in range(1, n):\\n            c[i] = b[i] + p * c[i - 1]\\n        \\n        p_new = p - b[n] / c[n - 1]\\n        \\n        if abs(p_new - p) < tolerance:\\n            return round(p_new, 3)\\n        \\n        p = p_new\",\n    \"loop_count\": 3,\n    \"branch_count\": 1,\n    \"variable_count\": 9\n}"}
{"qid": 200, "response": "{\n    \"reasoning_steps\": [\n        \"Recognize that absolute pitch prevalence varies significantly across populations, with higher rates in East Asian countries (up to 1 in 1,500) compared to Western populations\",\n        \"Account for the fact that many people with absolute pitch are undiagnosed, especially those without formal music training, making true prevalence higher than documented rates\",\n        \"Consider that early childhood music education and tonal language exposure increase absolute pitch development, suggesting the actual number exceeds conservative estimates of 1 in 10,000\"\n    ],\n    \"pseudocode\": \"def estimate_absolute_pitch_prevalence():\\n    documented_rate = 1 / 10000\\n    east_asian_multiplier = 6.7\\n    undiagnosed_factor = 2.5\\n    \\n    if population_has_tonal_language:\\n        base_rate = documented_rate * east_asian_multiplier\\n    else:\\n        base_rate = documented_rate\\n    \\n    estimated_true_rate = base_rate * undiagnosed_factor\\n    \\n    if estimated_true_rate > documented_rate:\\n        return \\\"significantly more than 1 in 10,000\\\"\\n    else:\\n        return \\\"approximately 1 in 10,000\\\"\",\n    \"loop_count\": 0,\n    \"branch_count\": 3,\n    \"variable_count\": 5\n}"}
